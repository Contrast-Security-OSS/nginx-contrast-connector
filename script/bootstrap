#!/bin/bash

set -o nounset
set -o errexit

DIR=$(pwd)
BUILDDIR=$DIR/build
NGINX_DIR=nginx
NGINX_VERSION=1.13.9

clean() {
  rm -rf build vendor
}

setup_local_directories() {
  if [ ! -d $BUILDDIR ]; then
    mkdir $BUILDDIR > /dev/null 2>&1
    mkdir $BUILDDIR/$NGINX_DIR > /dev/null 2>&1
  fi

  if [ ! -d vendor ]; then
    mkdir vendor > /dev/null 2>&1
  fi
}

install_protobuf() {
  if [ ! -d "vendor/protobuf" ]; then
    pushd vendor > /dev/null 2>&1
    git clone https://github.com/google/protobuf.git
    pushd protobuf > /dev/null 2>&1
    git checkout v3.5.2
    git submodule update --init --recursive
    ./autogen.sh
    ./configure 
    make
    sudo make install
    sudo ldconfig
    popd > /dev/null 2>&1
    popd > /dev/null 2>&1
  else
    printf "Protobuf library already installed\n"
  fi
}

install_protobuf_c() {
  if [ ! -d "vendor/protobuf-c" ]; then
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+LD_LIBRARY_PATH:}:/usr/local/lib"
    pushd vendor > /dev/null 2>&1
    #git clone https://github.com/palmergs/protobuf-c.git
    git clone https://github.com/protobuf-c/protobuf-c.git
    pushd protobuf-c > /dev/null 2>&1
    git checkout v1.3.0
    #git checkout adding-std
    ./autogen.sh
    ./configure 
    make
    sudo make install
    popd > /dev/null 2>&1
    popd > /dev/null 2>&1
  else
    printf "Protobuf-c library already installed\n"
  fi
}

install_nginx() {
  if [ ! -d "vendor/nginx-$NGINX_VERSION" ]; then
    pushd vendor > /dev/null 2>&1
    curl -s -L -O "http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz"
    tar xzf "nginx-$NGINX_VERSION.tar.gz"
    pushd "nginx-$NGINX_VERSION" > /dev/null 2>&1
    ./configure \
        --with-debug \
        --prefix=$(pwd)/../../build/nginx \
        --conf-path=conf/nginx.conf \
        --error-log-path=logs/error.log \
        --http-log-path=logs/access.log
    make
    make install
    popd > /dev/null 2>&1
    popd > /dev/null 2>&1
    ln -sf $(pwd)/nginx.conf $(pwd)/build/nginx/conf/nginx.conf
  else
    printf "NGINX already installed\n"
  fi
}

# NOTE: this is not used by the connector but is required for speedracer
install_libmodsecurity() {
  if [ ! -d "vendor/ModSecurity" ]; then
    pushd vendor > /dev/null 2>&1
    git clone https://github.com/SpiderLabs/ModSecurity
    pushd ModSecurity > /dev/null 2>&1
    git checkout v3.0.2
    sh build.sh
    git submodule init
    git submodule update
    ./configure
    make
    sudo make install
    popd > /dev/null 2>&1
    popd > /dev/null 2>&1
  else
    printf "LibModSecurity already installed\n"
  fi
}

# NOTE: this is not used by the connector but is required for speedracer
install_owasp() {
  if [ ! -d "vendor/owasp-modsecurity-crs" ]; then
    pushd vendor > /dev/null 2>&1
    git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git
    cp crs-setup.conf owasp-modsecurity-crs/.
    cp modsecurity.conf owasp-modsecurity-crs/.
    sudo touch /var/log/modsec_audit.log
    sudo chown ubuntu /var/log/modsec_audit.log
    popd > /dev/null 2>&1
  else
    printf "OWASP ModSecurity rules already installed\n"
  fi
}

# NOTE: this is not used by the connector but is required for speedracer
install_go() {
  if [ ! -d "/usr/local/go" ]; then
    pushd vendor > /dev/null 2>&1
    wget https://dl.google.com/go/go1.10.1.linux-amd64.tar.gz
    tar -C /usr/local -xzf go1.10.1.linux-amd64.tar.gz
    sudo chown -R ubuntu /usr/local/go
    popd > /dev/null 2>&1
  else
    printf "GO already installed\n"
  fi

  if [[ ! -v GOHOME ]]; then
    cd /go/src/contrast/speedracer
    curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    dep ensure
  else
    printf "GO already configured\n"
  fi
}

if [[ "$#" -eq 1 ]]; then
  if [[ "$1" == "clean" ]]; then
    clean
  else
    echo "clean is the only option"
  fi
else
  setup_local_directories
  install_protobuf
  install_protobuf_c
  install_nginx
  install_libmodsecurity
  install_owasp
  install_go
fi
