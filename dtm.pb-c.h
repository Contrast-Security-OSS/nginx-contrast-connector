/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: dtm.proto */

#ifndef PROTOBUF_C_dtm_2eproto__INCLUDED
#define PROTOBUF_C_dtm_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Contrast__Api__Dtm__Message Contrast__Api__Dtm__Message;
typedef struct _Contrast__Api__Dtm__ServerActivity Contrast__Api__Dtm__ServerActivity;
typedef struct _Contrast__Api__Dtm__ServerActivity__LogEnhancersEntry Contrast__Api__Dtm__ServerActivity__LogEnhancersEntry;
typedef struct _Contrast__Api__Dtm__ServerActivity__IpBlacklistsEntry Contrast__Api__Dtm__ServerActivity__IpBlacklistsEntry;
typedef struct _Contrast__Api__Dtm__AgentStartup Contrast__Api__Dtm__AgentStartup;
typedef struct _Contrast__Api__Dtm__ApplicationCreate Contrast__Api__Dtm__ApplicationCreate;
typedef struct _Contrast__Api__Dtm__ApplicationUpdate Contrast__Api__Dtm__ApplicationUpdate;
typedef struct _Contrast__Api__Dtm__ApplicationUpdate__TechnologiesEntry Contrast__Api__Dtm__ApplicationUpdate__TechnologiesEntry;
typedef struct _Contrast__Api__Dtm__ApplicationUpdate__LibrariesEntry Contrast__Api__Dtm__ApplicationUpdate__LibrariesEntry;
typedef struct _Contrast__Api__Dtm__Activity Contrast__Api__Dtm__Activity;
typedef struct _Contrast__Api__Dtm__Activity__TechnologiesEntry Contrast__Api__Dtm__Activity__TechnologiesEntry;
typedef struct _Contrast__Api__Dtm__Activity__LibraryUsagesEntry Contrast__Api__Dtm__Activity__LibraryUsagesEntry;
typedef struct _Contrast__Api__Dtm__Finding Contrast__Api__Dtm__Finding;
typedef struct _Contrast__Api__Dtm__Finding__PropertiesEntry Contrast__Api__Dtm__Finding__PropertiesEntry;
typedef struct _Contrast__Api__Dtm__PossibleSecurityControl Contrast__Api__Dtm__PossibleSecurityControl;
typedef struct _Contrast__Api__Dtm__View Contrast__Api__Dtm__View;
typedef struct _Contrast__Api__Dtm__Platform Contrast__Api__Dtm__Platform;
typedef struct _Contrast__Api__Dtm__ArchitectureComponent Contrast__Api__Dtm__ArchitectureComponent;
typedef struct _Contrast__Api__Dtm__Library Contrast__Api__Dtm__Library;
typedef struct _Contrast__Api__Dtm__LibraryUsageUpdate Contrast__Api__Dtm__LibraryUsageUpdate;
typedef struct _Contrast__Api__Dtm__LibraryUsageUpdate__ClassNamesEntry Contrast__Api__Dtm__LibraryUsageUpdate__ClassNamesEntry;
typedef struct _Contrast__Api__Dtm__Address Contrast__Api__Dtm__Address;
typedef struct _Contrast__Api__Dtm__RawRequest Contrast__Api__Dtm__RawRequest;
typedef struct _Contrast__Api__Dtm__HttpRequest Contrast__Api__Dtm__HttpRequest;
typedef struct _Contrast__Api__Dtm__HttpRequest__NormalizedRequestParamsEntry Contrast__Api__Dtm__HttpRequest__NormalizedRequestParamsEntry;
typedef struct _Contrast__Api__Dtm__HttpRequest__RequestHeadersEntry Contrast__Api__Dtm__HttpRequest__RequestHeadersEntry;
typedef struct _Contrast__Api__Dtm__HttpRequest__NormalizedRequestHeadersEntry Contrast__Api__Dtm__HttpRequest__NormalizedRequestHeadersEntry;
typedef struct _Contrast__Api__Dtm__HttpRequest__NormalizedCookiesEntry Contrast__Api__Dtm__HttpRequest__NormalizedCookiesEntry;
typedef struct _Contrast__Api__Dtm__AgentEvent Contrast__Api__Dtm__AgentEvent;
typedef struct _Contrast__Api__Dtm__AgentEvent__OptionsEntry Contrast__Api__Dtm__AgentEvent__OptionsEntry;
typedef struct _Contrast__Api__Dtm__HttpResponse Contrast__Api__Dtm__HttpResponse;
typedef struct _Contrast__Api__Dtm__HttpResponse__ResponseHeadersEntry Contrast__Api__Dtm__HttpResponse__ResponseHeadersEntry;
typedef struct _Contrast__Api__Dtm__HttpResponse__NormalizedResponseHeadersEntry Contrast__Api__Dtm__HttpResponse__NormalizedResponseHeadersEntry;
typedef struct _Contrast__Api__Dtm__SimplePair Contrast__Api__Dtm__SimplePair;
typedef struct _Contrast__Api__Dtm__Pair Contrast__Api__Dtm__Pair;
typedef struct _Contrast__Api__Dtm__AttackResult Contrast__Api__Dtm__AttackResult;
typedef struct _Contrast__Api__Dtm__RaspRuleSample Contrast__Api__Dtm__RaspRuleSample;
typedef struct _Contrast__Api__Dtm__ModSecurityDetails Contrast__Api__Dtm__ModSecurityDetails;
typedef struct _Contrast__Api__Dtm__ModSecurityLog Contrast__Api__Dtm__ModSecurityLog;
typedef struct _Contrast__Api__Dtm__ModSecurityLog__ParamsEntry Contrast__Api__Dtm__ModSecurityLog__ParamsEntry;
typedef struct _Contrast__Api__Dtm__BruteForceDetails Contrast__Api__Dtm__BruteForceDetails;
typedef struct _Contrast__Api__Dtm__BotBlockerDetails Contrast__Api__Dtm__BotBlockerDetails;
typedef struct _Contrast__Api__Dtm__CmdInjectionDetails Contrast__Api__Dtm__CmdInjectionDetails;
typedef struct _Contrast__Api__Dtm__CsrfDetails Contrast__Api__Dtm__CsrfDetails;
typedef struct _Contrast__Api__Dtm__CveDetails Contrast__Api__Dtm__CveDetails;
typedef struct _Contrast__Api__Dtm__Cve20170898Details Contrast__Api__Dtm__Cve20170898Details;
typedef struct _Contrast__Api__Dtm__Cve201714033Details Contrast__Api__Dtm__Cve201714033Details;
typedef struct _Contrast__Api__Dtm__Cve201714064Details Contrast__Api__Dtm__Cve201714064Details;
typedef struct _Contrast__Api__Dtm__Cve201717405Details Contrast__Api__Dtm__Cve201717405Details;
typedef struct _Contrast__Api__Dtm__HttpMethodTamperingDetails Contrast__Api__Dtm__HttpMethodTamperingDetails;
typedef struct _Contrast__Api__Dtm__UntrustedDeserializationDetails Contrast__Api__Dtm__UntrustedDeserializationDetails;
typedef struct _Contrast__Api__Dtm__ElInjectionDetails Contrast__Api__Dtm__ElInjectionDetails;
typedef struct _Contrast__Api__Dtm__IpBlacklistDetails Contrast__Api__Dtm__IpBlacklistDetails;
typedef struct _Contrast__Api__Dtm__MarkOfTheBeastDetails Contrast__Api__Dtm__MarkOfTheBeastDetails;
typedef struct _Contrast__Api__Dtm__PaddingOracleDetails Contrast__Api__Dtm__PaddingOracleDetails;
typedef struct _Contrast__Api__Dtm__PathTraversalDetails Contrast__Api__Dtm__PathTraversalDetails;
typedef struct _Contrast__Api__Dtm__ReDosDetails Contrast__Api__Dtm__ReDosDetails;
typedef struct _Contrast__Api__Dtm__SqlInjectionDetails Contrast__Api__Dtm__SqlInjectionDetails;
typedef struct _Contrast__Api__Dtm__NoSqlInjectionDetails Contrast__Api__Dtm__NoSqlInjectionDetails;
typedef struct _Contrast__Api__Dtm__SsrfDetails Contrast__Api__Dtm__SsrfDetails;
typedef struct _Contrast__Api__Dtm__VirtualPatchDetails Contrast__Api__Dtm__VirtualPatchDetails;
typedef struct _Contrast__Api__Dtm__XssDetails Contrast__Api__Dtm__XssDetails;
typedef struct _Contrast__Api__Dtm__XssMatch Contrast__Api__Dtm__XssMatch;
typedef struct _Contrast__Api__Dtm__XxeDetails Contrast__Api__Dtm__XxeDetails;
typedef struct _Contrast__Api__Dtm__XxeMatch Contrast__Api__Dtm__XxeMatch;
typedef struct _Contrast__Api__Dtm__XxeWrapper Contrast__Api__Dtm__XxeWrapper;
typedef struct _Contrast__Api__Dtm__UserInput Contrast__Api__Dtm__UserInput;
typedef struct _Contrast__Api__Dtm__StackTraceElement Contrast__Api__Dtm__StackTraceElement;
typedef struct _Contrast__Api__Dtm__TraceEvent Contrast__Api__Dtm__TraceEvent;
typedef struct _Contrast__Api__Dtm__EventSignature Contrast__Api__Dtm__EventSignature;
typedef struct _Contrast__Api__Dtm__EventSources Contrast__Api__Dtm__EventSources;
typedef struct _Contrast__Api__Dtm__TraceEventObject Contrast__Api__Dtm__TraceEventObject;
typedef struct _Contrast__Api__Dtm__TagRange Contrast__Api__Dtm__TagRange;
typedef struct _Contrast__Api__Dtm__TraceStack Contrast__Api__Dtm__TraceStack;


/* --- enums --- */

typedef enum _Contrast__Api__Dtm__HttpRequest__Authentication {
  /*
   * no login detected and no existing authenticated id found
   */
  CONTRAST__API__DTM__HTTP_REQUEST__AUTHENTICATION__UNAUTHENTICATED = 0,
  /*
   * no login detected but existing authenticated id found
   */
  CONTRAST__API__DTM__HTTP_REQUEST__AUTHENTICATION__AUTHENTICATED = 1,
  /*
   * login attempt apparently failed
   */
  CONTRAST__API__DTM__HTTP_REQUEST__AUTHENTICATION__LOGIN_FAIL = 2,
  /*
   * login attempt apparently succeeded
   */
  CONTRAST__API__DTM__HTTP_REQUEST__AUTHENTICATION__LOGIN_SUCCESS = 3,
  /*
   * login attempt but could not determine success
   */
  CONTRAST__API__DTM__HTTP_REQUEST__AUTHENTICATION__LOGIN_UNKNOWN = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__DTM__HTTP_REQUEST__AUTHENTICATION)
} Contrast__Api__Dtm__HttpRequest__Authentication;
typedef enum _Contrast__Api__Dtm__HttpRequest__DocumentType {
  CONTRAST__API__DTM__HTTP_REQUEST__DOCUMENT_TYPE__NORMAL = 0,
  CONTRAST__API__DTM__HTTP_REQUEST__DOCUMENT_TYPE__JSON = 1,
  CONTRAST__API__DTM__HTTP_REQUEST__DOCUMENT_TYPE__XML = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__DTM__HTTP_REQUEST__DOCUMENT_TYPE)
} Contrast__Api__Dtm__HttpRequest__DocumentType;
typedef enum _Contrast__Api__Dtm__AttackResult__ResponseType {
  CONTRAST__API__DTM__ATTACK_RESULT__RESPONSE_TYPE__NO_ACTION = 0,
  CONTRAST__API__DTM__ATTACK_RESULT__RESPONSE_TYPE__BLOCKED = 1,
  CONTRAST__API__DTM__ATTACK_RESULT__RESPONSE_TYPE__MONITORED = 2,
  CONTRAST__API__DTM__ATTACK_RESULT__RESPONSE_TYPE__PROBED = 3,
  CONTRAST__API__DTM__ATTACK_RESULT__RESPONSE_TYPE__BLOCKED_AT_PERIMETER = 4,
  CONTRAST__API__DTM__ATTACK_RESULT__RESPONSE_TYPE__AGGREGATED = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__DTM__ATTACK_RESULT__RESPONSE_TYPE)
} Contrast__Api__Dtm__AttackResult__ResponseType;
typedef enum _Contrast__Api__Dtm__UserInput__InputType {
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__UNDEFINED_TYPE = 0,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__BODY = 1,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__COOKIE_NAME = 2,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__COOKIE_VALUE = 3,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__HEADER = 4,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__PARAMETER_NAME = 5,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__PARAMETER_VALUE = 6,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__QUERYSTRING = 7,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__URI = 8,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__SOCKET = 9,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__JSON_VALUE = 10,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__JSON_ARRAYED_VALUE = 11,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__MULTIPART_CONTENT_TYPE = 16,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__MULTIPART_VALUE = 17,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__MULTIPART_FIELD_NAME = 18,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__MULTIPART_NAME = 19,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__XML_VALUE = 20,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__DWR_VALUE = 21,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__METHOD = 22,
  CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__UNKNOWN = 99
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE)
} Contrast__Api__Dtm__UserInput__InputType;
typedef enum _Contrast__Api__Dtm__TraceEvent__Action {
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__CREATION = 0,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__PROPAGATION = 1,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__A2A = 3,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__A2R = 4,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__O2A = 5,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__O2P = 6,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__O2O = 7,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__O2R = 8,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__P2A = 9,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__P2P = 10,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__P2O = 11,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__TAG = 12,
  CONTRAST__API__DTM__TRACE_EVENT__ACTION__TRIGGER = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__DTM__TRACE_EVENT__ACTION)
} Contrast__Api__Dtm__TraceEvent__Action;

/* --- messages --- */

typedef enum {
  CONTRAST__API__DTM__MESSAGE__EVENT__NOT_SET = 0,
  CONTRAST__API__DTM__MESSAGE__EVENT_SERVER_ACTIVITY = 10,
  CONTRAST__API__DTM__MESSAGE__EVENT_AGENT_STARTUP = 11,
  CONTRAST__API__DTM__MESSAGE__EVENT_APPLICATION_CREATE = 12,
  CONTRAST__API__DTM__MESSAGE__EVENT_APPLICATION_UPDATE = 13,
  CONTRAST__API__DTM__MESSAGE__EVENT_ACTIVITY = 14,
  CONTRAST__API__DTM__MESSAGE__EVENT_REQUEST = 19,
  CONTRAST__API__DTM__MESSAGE__EVENT_PREFILTER = 20,
  CONTRAST__API__DTM__MESSAGE__EVENT_INFILTER = 21,
  CONTRAST__API__DTM__MESSAGE__EVENT_POSTFILTER = 22
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__DTM__MESSAGE__EVENT)
} Contrast__Api__Dtm__Message__EventCase;

struct  _Contrast__Api__Dtm__Message
{
  ProtobufCMessage base;
  /*
   * a process unique id for this client
   */
  char *client_id;
  /*
   * number of this "sending" instance
   */
  int32_t client_number;
  /*
   * total number of sending instances
   */
  int32_t client_total;
  /*
   * the process id of the agent
   */
  int64_t pid;
  /*
   * the parent process id of the agent
   */
  int64_t ppid;
  /*
   * total number of messages sent by this client
   */
  int32_t message_count;
  /*
   * when did the agent send this message
   */
  int64_t timestamp_ms;
  /*
   * the name of the protected / assessed app
   */
  char *app_name;
  /*
   * the language of the protected / assessed app
   */
  char *app_language;
  Contrast__Api__Dtm__Message__EventCase event_case;
  union {
    Contrast__Api__Dtm__ServerActivity *server_activity;
    Contrast__Api__Dtm__AgentStartup *agent_startup;
    Contrast__Api__Dtm__ApplicationCreate *application_create;
    Contrast__Api__Dtm__ApplicationUpdate *application_update;
    Contrast__Api__Dtm__Activity *activity;
    Contrast__Api__Dtm__RawRequest *request;
    Contrast__Api__Dtm__HttpRequest *prefilter;
    Contrast__Api__Dtm__AgentEvent *infilter;
    Contrast__Api__Dtm__HttpResponse *postfilter;
  };
};
#define CONTRAST__API__DTM__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__message__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONTRAST__API__DTM__MESSAGE__EVENT__NOT_SET, {0} }


struct  _Contrast__Api__Dtm__ServerActivity__LogEnhancersEntry
{
  ProtobufCMessage base;
  char *key;
  int32_t value;
};
#define CONTRAST__API__DTM__SERVER_ACTIVITY__LOG_ENHANCERS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__server_activity__log_enhancers_entry__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__ServerActivity__IpBlacklistsEntry
{
  ProtobufCMessage base;
  char *key;
  int32_t value;
};
#define CONTRAST__API__DTM__SERVER_ACTIVITY__IP_BLACKLISTS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__server_activity__ip_blacklists_entry__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__ServerActivity
{
  ProtobufCMessage base;
  size_t n_log_enhancers;
  Contrast__Api__Dtm__ServerActivity__LogEnhancersEntry **log_enhancers;
  size_t n_ip_blacklists;
  Contrast__Api__Dtm__ServerActivity__IpBlacklistsEntry **ip_blacklists;
};
#define CONTRAST__API__DTM__SERVER_ACTIVITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__server_activity__descriptor) \
    , 0,NULL, 0,NULL }


struct  _Contrast__Api__Dtm__AgentStartup
{
  ProtobufCMessage base;
  char *version;
  char *environment;
  char *tags;
};
#define CONTRAST__API__DTM__AGENT_STARTUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__agent_startup__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__ApplicationCreate
{
  ProtobufCMessage base;
  char *group;
  char *app_version;
  char *tags;
};
#define CONTRAST__API__DTM__APPLICATION_CREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__application_create__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__ApplicationUpdate__TechnologiesEntry
{
  ProtobufCMessage base;
  char *key;
  protobuf_c_boolean value;
};
#define CONTRAST__API__DTM__APPLICATION_UPDATE__TECHNOLOGIES_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__application_update__technologies_entry__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__ApplicationUpdate__LibrariesEntry
{
  ProtobufCMessage base;
  char *key;
  Contrast__Api__Dtm__Library *value;
};
#define CONTRAST__API__DTM__APPLICATION_UPDATE__LIBRARIES_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__application_update__libraries_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Contrast__Api__Dtm__ApplicationUpdate
{
  ProtobufCMessage base;
  int32_t coverage_loc;
  Contrast__Api__Dtm__Platform *platform;
  Contrast__Api__Dtm__View *view;
  size_t n_technologies;
  Contrast__Api__Dtm__ApplicationUpdate__TechnologiesEntry **technologies;
  size_t n_components;
  Contrast__Api__Dtm__ArchitectureComponent **components;
  size_t n_libraries;
  Contrast__Api__Dtm__ApplicationUpdate__LibrariesEntry **libraries;
};
#define CONTRAST__API__DTM__APPLICATION_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__application_update__descriptor) \
    , 0, NULL, NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Contrast__Api__Dtm__Activity__TechnologiesEntry
{
  ProtobufCMessage base;
  char *key;
  protobuf_c_boolean value;
};
#define CONTRAST__API__DTM__ACTIVITY__TECHNOLOGIES_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__activity__technologies_entry__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__Activity__LibraryUsagesEntry
{
  ProtobufCMessage base;
  char *key;
  Contrast__Api__Dtm__LibraryUsageUpdate *value;
};
#define CONTRAST__API__DTM__ACTIVITY__LIBRARY_USAGES_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__activity__library_usages_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Contrast__Api__Dtm__Activity
{
  ProtobufCMessage base;
  /*
   * the complete request and response for this event
   */
  Contrast__Api__Dtm__HttpRequest *http_request;
  Contrast__Api__Dtm__HttpResponse *http_response;
  /*
   * total time from initial request until the message is sent to service
   */
  int64_t duration_ms;
  /*
   * inventory
   */
  int32_t query_count;
  size_t n_technologies;
  Contrast__Api__Dtm__Activity__TechnologiesEntry **technologies;
  size_t n_library_usages;
  Contrast__Api__Dtm__Activity__LibraryUsagesEntry **library_usages;
  size_t n_architectures;
  Contrast__Api__Dtm__ArchitectureComponent **architectures;
  /*
   * defend
   */
  size_t n_results;
  Contrast__Api__Dtm__AttackResult **results;
  /*
   * assess
   */
  size_t n_findings;
  Contrast__Api__Dtm__Finding **findings;
  size_t n_controls;
  Contrast__Api__Dtm__PossibleSecurityControl **controls;
};
#define CONTRAST__API__DTM__ACTIVITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__activity__descriptor) \
    , NULL, NULL, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Contrast__Api__Dtm__Finding__PropertiesEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define CONTRAST__API__DTM__FINDING__PROPERTIES_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__finding__properties_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__Finding
{
  ProtobufCMessage base;
  char *hash_code;
  char *platform;
  /*
   * name of the assess rule
   */
  char *rule_id;
  char *evidence;
  size_t n_properties;
  Contrast__Api__Dtm__Finding__PropertiesEntry **properties;
  /*
   * history of the data propogations
   */
  size_t n_events;
  Contrast__Api__Dtm__TraceEvent **events;
  /*
   * unique key used for checking preflight before sending to Teamserver
   */
  char *preflight;
  /*
   * comma-delimited tags defined on the config
   */
  char *tags;
};
#define CONTRAST__API__DTM__FINDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__finding__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__PossibleSecurityControl
{
  ProtobufCMessage base;
  char *api;
  char *type;
  int64_t traits;
};
#define CONTRAST__API__DTM__POSSIBLE_SECURITY_CONTROL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__possible_security_control__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__View
{
  ProtobufCMessage base;
  int32_t accessible;
  int32_t total_view_fields;
  int32_t line_count;
};
#define CONTRAST__API__DTM__VIEW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__view__descriptor) \
    , 0, 0, 0 }


struct  _Contrast__Api__Dtm__Platform
{
  ProtobufCMessage base;
  char *major;
  char *minor;
  char *build;
  char *service_pack;
  size_t n_updates;
  char **updates;
};
#define CONTRAST__API__DTM__PLATFORM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__platform__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


struct  _Contrast__Api__Dtm__ArchitectureComponent
{
  ProtobufCMessage base;
  char *type;
  char *vendor;
  char *url;
  char *remote_host;
  int32_t remote_port;
};
#define CONTRAST__API__DTM__ARCHITECTURE_COMPONENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__architecture_component__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__Library
{
  ProtobufCMessage base;
  char *hash_code;
  char *file_path;
  char *url;
  char *version;
  int32_t tloc;
  int32_t class_count;
  int32_t used_class_count;
  int64_t internal_ms;
  int64_t external_ms;
  char *manifest;
  char *tags;
};
#define CONTRAST__API__DTM__LIBRARY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__library__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__LibraryUsageUpdate__ClassNamesEntry
{
  ProtobufCMessage base;
  char *key;
  protobuf_c_boolean value;
};
#define CONTRAST__API__DTM__LIBRARY_USAGE_UPDATE__CLASS_NAMES_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__library_usage_update__class_names_entry__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__LibraryUsageUpdate
{
  ProtobufCMessage base;
  int32_t count;
  char *hash_code;
  size_t n_class_names;
  Contrast__Api__Dtm__LibraryUsageUpdate__ClassNamesEntry **class_names;
};
#define CONTRAST__API__DTM__LIBRARY_USAGE_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__library_usage_update__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL }


struct  _Contrast__Api__Dtm__Address
{
  ProtobufCMessage base;
  char *ip;
  char *host;
  int32_t port;
};
#define CONTRAST__API__DTM__ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__address__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__RawRequest
{
  ProtobufCMessage base;
  /*
   * this is optional unless the agent has a way of assigning a unique id that is valid for the lifespan of the request
   */
  char *uuid;
  int64_t timestamp_ms;
  /*
   * e.g. GET /test?a=1&b=2 HTTP/1.1
   */
  char *request_line;
  /*
   * e.g. GET /?a=1 HTTP/1.1 results in a normalized uri of /index.html 
   */
  char *normalized_uri;
  /*
   * IPv4 or IPv6 string
   */
  char *client_ip;
  /*
   * 4 or 6 or -1 (for unknown)
   */
  int32_t client_ip_version;
  int32_t client_port;
  char *server_ip;
  int32_t server_ip_version;
  int32_t server_port;
  /*
   * Request Headers
   */
  size_t n_request_headers;
  Contrast__Api__Dtm__SimplePair **request_headers;
  /*
   * Request Body
   */
  char *request_body;
};
#define CONTRAST__API__DTM__RAW_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__raw_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string, 0, 0, 0,NULL, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__HttpRequest__NormalizedRequestParamsEntry
{
  ProtobufCMessage base;
  char *key;
  Contrast__Api__Dtm__Pair *value;
};
#define CONTRAST__API__DTM__HTTP_REQUEST__NORMALIZED_REQUEST_PARAMS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__http_request__normalized_request_params_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Contrast__Api__Dtm__HttpRequest__RequestHeadersEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define CONTRAST__API__DTM__HTTP_REQUEST__REQUEST_HEADERS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__http_request__request_headers_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__HttpRequest__NormalizedRequestHeadersEntry
{
  ProtobufCMessage base;
  char *key;
  Contrast__Api__Dtm__Pair *value;
};
#define CONTRAST__API__DTM__HTTP_REQUEST__NORMALIZED_REQUEST_HEADERS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__http_request__normalized_request_headers_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Contrast__Api__Dtm__HttpRequest__NormalizedCookiesEntry
{
  ProtobufCMessage base;
  char *key;
  Contrast__Api__Dtm__Pair *value;
};
#define CONTRAST__API__DTM__HTTP_REQUEST__NORMALIZED_COOKIES_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__http_request__normalized_cookies_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Contrast__Api__Dtm__HttpRequest
{
  ProtobufCMessage base;
  /*
   * this is optional unless the agent has a way of assigning a unique id that is valid for the lifespan of the request
   */
  char *uuid;
  int64_t timestamp_ms;
  /*
   * PHASE 0: connection
   */
  Contrast__Api__Dtm__Address *sender;
  Contrast__Api__Dtm__Address *receiver;
  /*
   * http or https
   */
  char *protocol;
  /*
   * HTTP/1.1
   */
  char *version;
  /*
   * one of GET, POST, OPTION, etc
   */
  char *method;
  /*
   * e.g. /context/path/to/123/edit?a=1&b=2&c[]=3&c[]=4
   */
  char *raw;
  /*
   * if true the connection information has been parsed and normalized
   */
  protobuf_c_boolean parsed_connection;
  /*
   * e.g. /context/path/to/123/edit
   */
  char *uri;
  /*
   * e.g. /context/path/to/{n}/edit
   */
  char *normalized_uri;
  /*
   * e.g. /context
   */
  char *context;
  /*
   * e.g. /path/to/123/edit
   */
  char *path;
  /*
   * e.g. a=1&b=2&c[]=3&c[]=4
   */
  char *query_string;
  /*
   * Example: ?a=1&b=2&c[]=3&c[]=4&d[e]=5&d[f]=6
   * "a" => a,[1]
   * "b" => b,[2]
   * "c" => c,[3,4]
   * "d>e" => e,[5]
   * "d>f" => f,[5]
   * 
   * Params from forms won't be available until the request body is parsed
   * XML: <b><a attr="123">456</a></b>
   * "/b/a#attr" => attr,[123]
   * "/b/a" => a,[456]
   * JSON: { a: '1', b: { c: [ 2, 3, 4 ] } }
   * "/a" => a,[1]
   * "/b/c" => c,[2,3,4]
   */
  size_t n_normalized_request_params;
  Contrast__Api__Dtm__HttpRequest__NormalizedRequestParamsEntry **normalized_request_params;
  /*
   * PHASE 1: request headers
   */
  size_t n_request_headers;
  Contrast__Api__Dtm__HttpRequest__RequestHeadersEntry **request_headers;
  /*
   * if true, the request headers have been parsed and normalized
   */
  protobuf_c_boolean parsed_request_headers;
  /*
   * Key is UPPERCASE_UNDERSCORE
   * Example: Accept-Encoding: gzip, deflate
   * "ACCEPT_ENCODING" => Accept-Encoding,[gzip,deflate]
   */
  size_t n_normalized_request_headers;
  Contrast__Api__Dtm__HttpRequest__NormalizedRequestHeadersEntry **normalized_request_headers;
  /*
   * Cookies is a secondary parsing of the COOKIE header. 
   * Example: Cookie: $Version=1; Skin=new
   * "$Version" => $Version,[1]
   * "Skin" => Skin,[new]
   */
  size_t n_normalized_cookies;
  Contrast__Api__Dtm__HttpRequest__NormalizedCookiesEntry **normalized_cookies;
  /*
   * PHASE 2: request body
   */
  char *request_body;
  /*
   * if true; information has been parsed from the body
   */
  protobuf_c_boolean parsed_request_body;
  /*
   * one of NORMAL, XML, JSON
   */
  Contrast__Api__Dtm__HttpRequest__DocumentType document_type;
  /*
   * what is the current authentication state from this request
   */
  Contrast__Api__Dtm__HttpRequest__Authentication authentication;
  /*
   * authenticated_id of the authentication attempt or the current logged in user
   */
  char *principal;
  /*
   * metadata: anything the agent wants to tell the service
   */
  char *server_info;
};
#define CONTRAST__API__DTM__HTTP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__http_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, NULL, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, 0, CONTRAST__API__DTM__HTTP_REQUEST__DOCUMENT_TYPE__NORMAL, CONTRAST__API__DTM__HTTP_REQUEST__AUTHENTICATION__UNAUTHENTICATED, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__AgentEvent__OptionsEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define CONTRAST__API__DTM__AGENT_EVENT__OPTIONS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__agent_event__options_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__AgentEvent
{
  ProtobufCMessage base;
  /*
   * metadata
   */
  char *uuid;
  int64_t timestamp_ms;
  /*
   * what possible rule was triggered in the app?
   */
  char *rule_id;
  /*
   * what is the attack vector string (e.g. the SQL query string)
   */
  char *vector;
  /*
   * event context
   */
  char *class_name;
  char *method_name;
  size_t n_arguments;
  char **arguments;
  size_t n_options;
  Contrast__Api__Dtm__AgentEvent__OptionsEntry **options;
  size_t n_stack_trace;
  char **stack_trace;
};
#define CONTRAST__API__DTM__AGENT_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__agent_event__descriptor) \
    , (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL }


struct  _Contrast__Api__Dtm__HttpResponse__ResponseHeadersEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define CONTRAST__API__DTM__HTTP_RESPONSE__RESPONSE_HEADERS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__http_response__response_headers_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__HttpResponse__NormalizedResponseHeadersEntry
{
  ProtobufCMessage base;
  char *key;
  Contrast__Api__Dtm__Pair *value;
};
#define CONTRAST__API__DTM__HTTP_RESPONSE__NORMALIZED_RESPONSE_HEADERS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__http_response__normalized_response_headers_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Contrast__Api__Dtm__HttpResponse
{
  ProtobufCMessage base;
  /*
   * metadata
   */
  char *uuid;
  int64_t timestamp_ms;
  /*
   * e.g. 200, 204, 301, 404, etc
   */
  int32_t response_code;
  /*
   * PHASE 3: response headers received
   */
  size_t n_response_headers;
  Contrast__Api__Dtm__HttpResponse__ResponseHeadersEntry **response_headers;
  /*
   * if true the response headers have been parsed and normalized
   */
  protobuf_c_boolean parsed_response_headers;
  /*
   * Key is UPPERCASE_UNDERSCORE
   * Example: Content-Type: text/html; charset=utf-8
   * "CONTENT_TYPE" => Content-Type,["text/html; charset=utf8"]
   */
  size_t n_normalized_response_headers;
  Contrast__Api__Dtm__HttpResponse__NormalizedResponseHeadersEntry **normalized_response_headers;
  /*
   * PHASE 4: response body received
   */
  char *response_body;
  /*
   * if true the response body has been parsed and information extracted
   */
  protobuf_c_boolean parsed_response_body;
  /*
   * One of NORMAL (e.g. HTML, text), JSON, XML
   */
  Contrast__Api__Dtm__HttpRequest__DocumentType document_type;
};
#define CONTRAST__API__DTM__HTTP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__http_response__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0,NULL, 0, 0,NULL, (char *)protobuf_c_empty_string, 0, CONTRAST__API__DTM__HTTP_REQUEST__DOCUMENT_TYPE__NORMAL }


struct  _Contrast__Api__Dtm__SimplePair
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define CONTRAST__API__DTM__SIMPLE_PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__simple_pair__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__Pair
{
  ProtobufCMessage base;
  /*
   * this is the non-materialized key in the case of nested parameters
   */
  char *key;
  size_t n_values;
  char **values;
};
#define CONTRAST__API__DTM__PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__pair__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  _Contrast__Api__Dtm__AttackResult
{
  ProtobufCMessage base;
  /*
   * e.g. BLOCKED
   */
  Contrast__Api__Dtm__AttackResult__ResponseType response;
  /*
   * e.g. sql-injection
   */
  char *rule_id;
  /*
   * samples collected (which may be <= total due to limiting)
   */
  size_t n_samples;
  Contrast__Api__Dtm__RaspRuleSample **samples;
  /*
   * comma-delimited tags from the user configuration
   */
  char *tags;
  /*
   * fields for tracking accumulated rules
   */
  int64_t acc_updated_ms;
  int32_t acc_limit;
  int64_t acc_window_ms;
  int32_t acc_count;
  char *acc_mode;
  char *acc_msg;
};
#define CONTRAST__API__DTM__ATTACK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__attack_result__descriptor) \
    , CONTRAST__API__DTM__ATTACK_RESULT__RESPONSE_TYPE__NO_ACTION, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


typedef enum {
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS__NOT_SET = 0,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_BRUTE_FORCE = 16,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_BOT_BLOCKER = 17,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_CMDI = 18,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_CSRF = 19,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_CVE = 20,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_UNTRUSTED_DESERIALIZATION = 21,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_EL_INJECTION = 22,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_IP_BLACKLIST = 23,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_MARK_OF_THE_BEAST = 24,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_PADDING_ORACLE = 25,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_PATH_TRAVERSAL = 26,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_RE_DOS = 27,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_SQLI = 28,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_SSRF = 29,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_VIRTUAL_PATCH = 30,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_XSS = 31,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_XXE = 32,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_NO_SQLI = 33,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_METHOD_TAMPERING = 34,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_CVE_2017_0898 = 35,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_CVE_2017_14033 = 36,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_CVE_2017_14064 = 37,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_CVE_2017_17405 = 38,
  CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS_MOD_SECURITY = 39
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS)
} Contrast__Api__Dtm__RaspRuleSample__DetailsCase;

struct  _Contrast__Api__Dtm__RaspRuleSample
{
  ProtobufCMessage base;
  int64_t timestamp_ms;
  size_t n_stack_trace_elements;
  Contrast__Api__Dtm__StackTraceElement **stack_trace_elements;
  Contrast__Api__Dtm__UserInput *user_input;
  Contrast__Api__Dtm__RaspRuleSample__DetailsCase details_case;
  union {
    Contrast__Api__Dtm__BruteForceDetails *brute_force;
    Contrast__Api__Dtm__BotBlockerDetails *bot_blocker;
    Contrast__Api__Dtm__CmdInjectionDetails *cmdi;
    Contrast__Api__Dtm__CsrfDetails *csrf;
    Contrast__Api__Dtm__CveDetails *cve;
    Contrast__Api__Dtm__UntrustedDeserializationDetails *untrusted_deserialization;
    Contrast__Api__Dtm__ElInjectionDetails *el_injection;
    Contrast__Api__Dtm__IpBlacklistDetails *ip_blacklist;
    Contrast__Api__Dtm__MarkOfTheBeastDetails *mark_of_the_beast;
    Contrast__Api__Dtm__PaddingOracleDetails *padding_oracle;
    Contrast__Api__Dtm__PathTraversalDetails *path_traversal;
    Contrast__Api__Dtm__ReDosDetails *re_dos;
    Contrast__Api__Dtm__SqlInjectionDetails *sqli;
    Contrast__Api__Dtm__SsrfDetails *ssrf;
    Contrast__Api__Dtm__VirtualPatchDetails *virtual_patch;
    Contrast__Api__Dtm__XssDetails *xss;
    Contrast__Api__Dtm__XxeDetails *xxe;
    Contrast__Api__Dtm__NoSqlInjectionDetails *no_sqli;
    Contrast__Api__Dtm__HttpMethodTamperingDetails *method_tampering;
    Contrast__Api__Dtm__Cve20170898Details *cve_2017_0898;
    Contrast__Api__Dtm__Cve201714033Details *cve_2017_14033;
    Contrast__Api__Dtm__Cve201714064Details *cve_2017_14064;
    Contrast__Api__Dtm__Cve201717405Details *cve_2017_17405;
    Contrast__Api__Dtm__ModSecurityDetails *mod_security;
  };
};
#define CONTRAST__API__DTM__RASP_RULE_SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__rasp_rule_sample__descriptor) \
    , 0, 0,NULL, NULL, CONTRAST__API__DTM__RASP_RULE_SAMPLE__DETAILS__NOT_SET, {0} }


struct  _Contrast__Api__Dtm__ModSecurityDetails
{
  ProtobufCMessage base;
  char *transaction_id;
  int32_t status;
  size_t n_logs;
  Contrast__Api__Dtm__ModSecurityLog **logs;
};
#define CONTRAST__API__DTM__MOD_SECURITY_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__mod_security_details__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0,NULL }


struct  _Contrast__Api__Dtm__ModSecurityLog__ParamsEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define CONTRAST__API__DTM__MOD_SECURITY_LOG__PARAMS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__mod_security_log__params_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__ModSecurityLog
{
  ProtobufCMessage base;
  char *message;
  size_t n_params;
  Contrast__Api__Dtm__ModSecurityLog__ParamsEntry **params;
};
#define CONTRAST__API__DTM__MOD_SECURITY_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__mod_security_log__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  _Contrast__Api__Dtm__BruteForceDetails
{
  ProtobufCMessage base;
  int32_t count;
};
#define CONTRAST__API__DTM__BRUTE_FORCE_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__brute_force_details__descriptor) \
    , 0 }


struct  _Contrast__Api__Dtm__BotBlockerDetails
{
  ProtobufCMessage base;
  char *bot;
  char *user_agent;
};
#define CONTRAST__API__DTM__BOT_BLOCKER_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__bot_blocker_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__CmdInjectionDetails
{
  ProtobufCMessage base;
  char *command;
  int32_t start_idx;
  int32_t end_idx;
};
#define CONTRAST__API__DTM__CMD_INJECTION_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__cmd_injection_details__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  _Contrast__Api__Dtm__CsrfDetails
{
  ProtobufCMessage base;
  char *name;
  char *expected;
  char *presented;
};
#define CONTRAST__API__DTM__CSRF_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__csrf_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__CveDetails
{
  ProtobufCMessage base;
  char *name;
  char *value;
  char *cve;
  char *library;
};
#define CONTRAST__API__DTM__CVE_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__cve_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__Cve20170898Details
{
  ProtobufCMessage base;
  char *format_string;
  char *malicious_format_group;
  char *precision_argument;
  char *value_argument;
  char *arguments;
  char *ruby_version;
};
#define CONTRAST__API__DTM__CVE20170898_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__cve20170898_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__Cve201714033Details
{
  ProtobufCMessage base;
  char *asn1;
  char *ruby_version;
};
#define CONTRAST__API__DTM__CVE201714033_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__cve201714033_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__Cve201714064Details
{
  ProtobufCMessage base;
  char *space;
  char *ruby_version;
  char *json_version;
};
#define CONTRAST__API__DTM__CVE201714064_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__cve201714064_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__Cve201717405Details
{
  ProtobufCMessage base;
  char *method;
  char *file_name;
  char *ruby_version;
};
#define CONTRAST__API__DTM__CVE201717405_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__cve201717405_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__HttpMethodTamperingDetails
{
  ProtobufCMessage base;
  char *method;
  int32_t response_code;
};
#define CONTRAST__API__DTM__HTTP_METHOD_TAMPERING_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__http_method_tampering_details__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__UntrustedDeserializationDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean command;
  char *deserializer;
};
#define CONTRAST__API__DTM__UNTRUSTED_DESERIALIZATION_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__untrusted_deserialization_details__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__ElInjectionDetails
{
  ProtobufCMessage base;
  char *attr_value;
  char *version;
  char *library_filename;
};
#define CONTRAST__API__DTM__EL_INJECTION_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__el_injection_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__IpBlacklistDetails
{
  ProtobufCMessage base;
  char *ip;
  char *uuid;
};
#define CONTRAST__API__DTM__IP_BLACKLIST_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__ip_blacklist_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__MarkOfTheBeastDetails
{
  ProtobufCMessage base;
  char *number;
  char *vendor;
  char *version;
};
#define CONTRAST__API__DTM__MARK_OF_THE_BEAST_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__mark_of_the_beast_details__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__PaddingOracleDetails
{
  ProtobufCMessage base;
  char *message;
  int32_t period;
  int32_t hits;
};
#define CONTRAST__API__DTM__PADDING_ORACLE_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__padding_oracle_details__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  _Contrast__Api__Dtm__PathTraversalDetails
{
  ProtobufCMessage base;
  char *path;
};
#define CONTRAST__API__DTM__PATH_TRAVERSAL_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__path_traversal_details__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__ReDosDetails
{
  ProtobufCMessage base;
  int32_t times_accessed;
  int64_t execution_time_ms;
  char *pattern;
  char *offending_string;
};
#define CONTRAST__API__DTM__RE_DOS_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__re_dos_details__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__SqlInjectionDetails
{
  ProtobufCMessage base;
  int32_t start_idx;
  int32_t end_idx;
  int32_t boundary_overrun_idx;
  int32_t input_boundary_idx;
  char *query;
};
#define CONTRAST__API__DTM__SQL_INJECTION_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__sql_injection_details__descriptor) \
    , 0, 0, 0, 0, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__NoSqlInjectionDetails
{
  ProtobufCMessage base;
  int32_t start_idx;
  int32_t end_idx;
  int32_t boundary_overrun_idx;
  int32_t input_boundary_idx;
  char *query;
};
#define CONTRAST__API__DTM__NO_SQL_INJECTION_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__no_sql_injection_details__descriptor) \
    , 0, 0, 0, 0, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__SsrfDetails
{
  ProtobufCMessage base;
  char *url;
};
#define CONTRAST__API__DTM__SSRF_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__ssrf_details__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__VirtualPatchDetails
{
  ProtobufCMessage base;
  char *uuid;
};
#define CONTRAST__API__DTM__VIRTUAL_PATCH_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__virtual_patch_details__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__XssDetails
{
  ProtobufCMessage base;
  char *input;
  size_t n_matches;
  Contrast__Api__Dtm__XssMatch **matches;
};
#define CONTRAST__API__DTM__XSS_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__xss_details__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  _Contrast__Api__Dtm__XssMatch
{
  ProtobufCMessage base;
  int64_t evidence_start_ms;
  char *evidence;
  int32_t offset;
};
#define CONTRAST__API__DTM__XSS_MATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__xss_match__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__XxeDetails
{
  ProtobufCMessage base;
  char *xml;
  size_t n_declared_entities;
  Contrast__Api__Dtm__XxeMatch **declared_entities;
  size_t n_entities_resolved;
  Contrast__Api__Dtm__XxeWrapper **entities_resolved;
};
#define CONTRAST__API__DTM__XXE_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__xxe_details__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  _Contrast__Api__Dtm__XxeMatch
{
  ProtobufCMessage base;
  int32_t start_idx;
  int32_t end_idx;
};
#define CONTRAST__API__DTM__XXE_MATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__xxe_match__descriptor) \
    , 0, 0 }


struct  _Contrast__Api__Dtm__XxeWrapper
{
  ProtobufCMessage base;
  char *system_id;
  char *public_id;
};
#define CONTRAST__API__DTM__XXE_WRAPPER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__xxe_wrapper__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__UserInput
{
  ProtobufCMessage base;
  char *path;
  char *key;
  char *value;
  Contrast__Api__Dtm__UserInput__InputType input_type;
  Contrast__Api__Dtm__HttpRequest__DocumentType document_type;
  size_t n_matcher_ids;
  char **matcher_ids;
};
#define CONTRAST__API__DTM__USER_INPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__user_input__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONTRAST__API__DTM__USER_INPUT__INPUT_TYPE__UNDEFINED_TYPE, CONTRAST__API__DTM__HTTP_REQUEST__DOCUMENT_TYPE__NORMAL, 0,NULL }


struct  _Contrast__Api__Dtm__StackTraceElement
{
  ProtobufCMessage base;
  char *declaring_class;
  char *method_name;
  char *file_name;
  int32_t line_number;
};
#define CONTRAST__API__DTM__STACK_TRACE_ELEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__stack_trace_element__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  _Contrast__Api__Dtm__TraceEvent
{
  ProtobufCMessage base;
  Contrast__Api__Dtm__TraceEvent__Action action;
  char *type;
  int64_t timestamp_ms;
  char *thread;
  char *bitset;
  Contrast__Api__Dtm__EventSignature *signature;
  char *field_name;
  char *context;
  char *code;
  Contrast__Api__Dtm__TraceEventObject *object;
  Contrast__Api__Dtm__TraceEventObject *ret;
  size_t n_args;
  Contrast__Api__Dtm__TraceEventObject **args;
  size_t n_stack;
  Contrast__Api__Dtm__TraceStack **stack;
  size_t n_eventsources;
  Contrast__Api__Dtm__EventSources **eventsources;
};
#define CONTRAST__API__DTM__TRACE_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__trace_event__descriptor) \
    , CONTRAST__API__DTM__TRACE_EVENT__ACTION__CREATION, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Contrast__Api__Dtm__EventSignature
{
  ProtobufCMessage base;
  char *returntype;
  char *classname;
  char *methodname;
  size_t n_argtypes;
  char **argtypes;
  protobuf_c_boolean constructor;
  protobuf_c_boolean voidmethod;
  int32_t flags;
};
#define CONTRAST__API__DTM__EVENT_SIGNATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__event_signature__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0, 0, 0 }


struct  _Contrast__Api__Dtm__EventSources
{
  ProtobufCMessage base;
  char *type;
  char *name;
};
#define CONTRAST__API__DTM__EVENT_SOURCES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__event_sources__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Dtm__TraceEventObject
{
  ProtobufCMessage base;
  protobuf_c_boolean tracked;
  char *value;
  size_t n_ranges;
  Contrast__Api__Dtm__TagRange **ranges;
};
#define CONTRAST__API__DTM__TRACE_EVENT_OBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__trace_event_object__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL }


struct  _Contrast__Api__Dtm__TagRange
{
  ProtobufCMessage base;
  int32_t start_idx;
  int32_t end_idx;
};
#define CONTRAST__API__DTM__TAG_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__tag_range__descriptor) \
    , 0, 0 }


struct  _Contrast__Api__Dtm__TraceStack
{
  ProtobufCMessage base;
  char *signature;
  char *method;
  char *file;
  int32_t line_number;
  char *type;
  char *eval;
};
#define CONTRAST__API__DTM__TRACE_STACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__dtm__trace_stack__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Contrast__Api__Dtm__Message methods */
void   contrast__api__dtm__message__init
                     (Contrast__Api__Dtm__Message         *message);
size_t contrast__api__dtm__message__get_packed_size
                     (const Contrast__Api__Dtm__Message   *message);
size_t contrast__api__dtm__message__pack
                     (const Contrast__Api__Dtm__Message   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__message__pack_to_buffer
                     (const Contrast__Api__Dtm__Message   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Message *
       contrast__api__dtm__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__message__free_unpacked
                     (Contrast__Api__Dtm__Message *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__ServerActivity__LogEnhancersEntry methods */
void   contrast__api__dtm__server_activity__log_enhancers_entry__init
                     (Contrast__Api__Dtm__ServerActivity__LogEnhancersEntry         *message);
/* Contrast__Api__Dtm__ServerActivity__IpBlacklistsEntry methods */
void   contrast__api__dtm__server_activity__ip_blacklists_entry__init
                     (Contrast__Api__Dtm__ServerActivity__IpBlacklistsEntry         *message);
/* Contrast__Api__Dtm__ServerActivity methods */
void   contrast__api__dtm__server_activity__init
                     (Contrast__Api__Dtm__ServerActivity         *message);
size_t contrast__api__dtm__server_activity__get_packed_size
                     (const Contrast__Api__Dtm__ServerActivity   *message);
size_t contrast__api__dtm__server_activity__pack
                     (const Contrast__Api__Dtm__ServerActivity   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__server_activity__pack_to_buffer
                     (const Contrast__Api__Dtm__ServerActivity   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__ServerActivity *
       contrast__api__dtm__server_activity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__server_activity__free_unpacked
                     (Contrast__Api__Dtm__ServerActivity *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__AgentStartup methods */
void   contrast__api__dtm__agent_startup__init
                     (Contrast__Api__Dtm__AgentStartup         *message);
size_t contrast__api__dtm__agent_startup__get_packed_size
                     (const Contrast__Api__Dtm__AgentStartup   *message);
size_t contrast__api__dtm__agent_startup__pack
                     (const Contrast__Api__Dtm__AgentStartup   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__agent_startup__pack_to_buffer
                     (const Contrast__Api__Dtm__AgentStartup   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__AgentStartup *
       contrast__api__dtm__agent_startup__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__agent_startup__free_unpacked
                     (Contrast__Api__Dtm__AgentStartup *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__ApplicationCreate methods */
void   contrast__api__dtm__application_create__init
                     (Contrast__Api__Dtm__ApplicationCreate         *message);
size_t contrast__api__dtm__application_create__get_packed_size
                     (const Contrast__Api__Dtm__ApplicationCreate   *message);
size_t contrast__api__dtm__application_create__pack
                     (const Contrast__Api__Dtm__ApplicationCreate   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__application_create__pack_to_buffer
                     (const Contrast__Api__Dtm__ApplicationCreate   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__ApplicationCreate *
       contrast__api__dtm__application_create__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__application_create__free_unpacked
                     (Contrast__Api__Dtm__ApplicationCreate *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__ApplicationUpdate__TechnologiesEntry methods */
void   contrast__api__dtm__application_update__technologies_entry__init
                     (Contrast__Api__Dtm__ApplicationUpdate__TechnologiesEntry         *message);
/* Contrast__Api__Dtm__ApplicationUpdate__LibrariesEntry methods */
void   contrast__api__dtm__application_update__libraries_entry__init
                     (Contrast__Api__Dtm__ApplicationUpdate__LibrariesEntry         *message);
/* Contrast__Api__Dtm__ApplicationUpdate methods */
void   contrast__api__dtm__application_update__init
                     (Contrast__Api__Dtm__ApplicationUpdate         *message);
size_t contrast__api__dtm__application_update__get_packed_size
                     (const Contrast__Api__Dtm__ApplicationUpdate   *message);
size_t contrast__api__dtm__application_update__pack
                     (const Contrast__Api__Dtm__ApplicationUpdate   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__application_update__pack_to_buffer
                     (const Contrast__Api__Dtm__ApplicationUpdate   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__ApplicationUpdate *
       contrast__api__dtm__application_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__application_update__free_unpacked
                     (Contrast__Api__Dtm__ApplicationUpdate *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Activity__TechnologiesEntry methods */
void   contrast__api__dtm__activity__technologies_entry__init
                     (Contrast__Api__Dtm__Activity__TechnologiesEntry         *message);
/* Contrast__Api__Dtm__Activity__LibraryUsagesEntry methods */
void   contrast__api__dtm__activity__library_usages_entry__init
                     (Contrast__Api__Dtm__Activity__LibraryUsagesEntry         *message);
/* Contrast__Api__Dtm__Activity methods */
void   contrast__api__dtm__activity__init
                     (Contrast__Api__Dtm__Activity         *message);
size_t contrast__api__dtm__activity__get_packed_size
                     (const Contrast__Api__Dtm__Activity   *message);
size_t contrast__api__dtm__activity__pack
                     (const Contrast__Api__Dtm__Activity   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__activity__pack_to_buffer
                     (const Contrast__Api__Dtm__Activity   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Activity *
       contrast__api__dtm__activity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__activity__free_unpacked
                     (Contrast__Api__Dtm__Activity *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Finding__PropertiesEntry methods */
void   contrast__api__dtm__finding__properties_entry__init
                     (Contrast__Api__Dtm__Finding__PropertiesEntry         *message);
/* Contrast__Api__Dtm__Finding methods */
void   contrast__api__dtm__finding__init
                     (Contrast__Api__Dtm__Finding         *message);
size_t contrast__api__dtm__finding__get_packed_size
                     (const Contrast__Api__Dtm__Finding   *message);
size_t contrast__api__dtm__finding__pack
                     (const Contrast__Api__Dtm__Finding   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__finding__pack_to_buffer
                     (const Contrast__Api__Dtm__Finding   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Finding *
       contrast__api__dtm__finding__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__finding__free_unpacked
                     (Contrast__Api__Dtm__Finding *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__PossibleSecurityControl methods */
void   contrast__api__dtm__possible_security_control__init
                     (Contrast__Api__Dtm__PossibleSecurityControl         *message);
size_t contrast__api__dtm__possible_security_control__get_packed_size
                     (const Contrast__Api__Dtm__PossibleSecurityControl   *message);
size_t contrast__api__dtm__possible_security_control__pack
                     (const Contrast__Api__Dtm__PossibleSecurityControl   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__possible_security_control__pack_to_buffer
                     (const Contrast__Api__Dtm__PossibleSecurityControl   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__PossibleSecurityControl *
       contrast__api__dtm__possible_security_control__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__possible_security_control__free_unpacked
                     (Contrast__Api__Dtm__PossibleSecurityControl *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__View methods */
void   contrast__api__dtm__view__init
                     (Contrast__Api__Dtm__View         *message);
size_t contrast__api__dtm__view__get_packed_size
                     (const Contrast__Api__Dtm__View   *message);
size_t contrast__api__dtm__view__pack
                     (const Contrast__Api__Dtm__View   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__view__pack_to_buffer
                     (const Contrast__Api__Dtm__View   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__View *
       contrast__api__dtm__view__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__view__free_unpacked
                     (Contrast__Api__Dtm__View *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Platform methods */
void   contrast__api__dtm__platform__init
                     (Contrast__Api__Dtm__Platform         *message);
size_t contrast__api__dtm__platform__get_packed_size
                     (const Contrast__Api__Dtm__Platform   *message);
size_t contrast__api__dtm__platform__pack
                     (const Contrast__Api__Dtm__Platform   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__platform__pack_to_buffer
                     (const Contrast__Api__Dtm__Platform   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Platform *
       contrast__api__dtm__platform__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__platform__free_unpacked
                     (Contrast__Api__Dtm__Platform *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__ArchitectureComponent methods */
void   contrast__api__dtm__architecture_component__init
                     (Contrast__Api__Dtm__ArchitectureComponent         *message);
size_t contrast__api__dtm__architecture_component__get_packed_size
                     (const Contrast__Api__Dtm__ArchitectureComponent   *message);
size_t contrast__api__dtm__architecture_component__pack
                     (const Contrast__Api__Dtm__ArchitectureComponent   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__architecture_component__pack_to_buffer
                     (const Contrast__Api__Dtm__ArchitectureComponent   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__ArchitectureComponent *
       contrast__api__dtm__architecture_component__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__architecture_component__free_unpacked
                     (Contrast__Api__Dtm__ArchitectureComponent *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Library methods */
void   contrast__api__dtm__library__init
                     (Contrast__Api__Dtm__Library         *message);
size_t contrast__api__dtm__library__get_packed_size
                     (const Contrast__Api__Dtm__Library   *message);
size_t contrast__api__dtm__library__pack
                     (const Contrast__Api__Dtm__Library   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__library__pack_to_buffer
                     (const Contrast__Api__Dtm__Library   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Library *
       contrast__api__dtm__library__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__library__free_unpacked
                     (Contrast__Api__Dtm__Library *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__LibraryUsageUpdate__ClassNamesEntry methods */
void   contrast__api__dtm__library_usage_update__class_names_entry__init
                     (Contrast__Api__Dtm__LibraryUsageUpdate__ClassNamesEntry         *message);
/* Contrast__Api__Dtm__LibraryUsageUpdate methods */
void   contrast__api__dtm__library_usage_update__init
                     (Contrast__Api__Dtm__LibraryUsageUpdate         *message);
size_t contrast__api__dtm__library_usage_update__get_packed_size
                     (const Contrast__Api__Dtm__LibraryUsageUpdate   *message);
size_t contrast__api__dtm__library_usage_update__pack
                     (const Contrast__Api__Dtm__LibraryUsageUpdate   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__library_usage_update__pack_to_buffer
                     (const Contrast__Api__Dtm__LibraryUsageUpdate   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__LibraryUsageUpdate *
       contrast__api__dtm__library_usage_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__library_usage_update__free_unpacked
                     (Contrast__Api__Dtm__LibraryUsageUpdate *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Address methods */
void   contrast__api__dtm__address__init
                     (Contrast__Api__Dtm__Address         *message);
size_t contrast__api__dtm__address__get_packed_size
                     (const Contrast__Api__Dtm__Address   *message);
size_t contrast__api__dtm__address__pack
                     (const Contrast__Api__Dtm__Address   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__address__pack_to_buffer
                     (const Contrast__Api__Dtm__Address   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Address *
       contrast__api__dtm__address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__address__free_unpacked
                     (Contrast__Api__Dtm__Address *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__RawRequest methods */
void   contrast__api__dtm__raw_request__init
                     (Contrast__Api__Dtm__RawRequest         *message);
size_t contrast__api__dtm__raw_request__get_packed_size
                     (const Contrast__Api__Dtm__RawRequest   *message);
size_t contrast__api__dtm__raw_request__pack
                     (const Contrast__Api__Dtm__RawRequest   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__raw_request__pack_to_buffer
                     (const Contrast__Api__Dtm__RawRequest   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__RawRequest *
       contrast__api__dtm__raw_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__raw_request__free_unpacked
                     (Contrast__Api__Dtm__RawRequest *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__HttpRequest__NormalizedRequestParamsEntry methods */
void   contrast__api__dtm__http_request__normalized_request_params_entry__init
                     (Contrast__Api__Dtm__HttpRequest__NormalizedRequestParamsEntry         *message);
/* Contrast__Api__Dtm__HttpRequest__RequestHeadersEntry methods */
void   contrast__api__dtm__http_request__request_headers_entry__init
                     (Contrast__Api__Dtm__HttpRequest__RequestHeadersEntry         *message);
/* Contrast__Api__Dtm__HttpRequest__NormalizedRequestHeadersEntry methods */
void   contrast__api__dtm__http_request__normalized_request_headers_entry__init
                     (Contrast__Api__Dtm__HttpRequest__NormalizedRequestHeadersEntry         *message);
/* Contrast__Api__Dtm__HttpRequest__NormalizedCookiesEntry methods */
void   contrast__api__dtm__http_request__normalized_cookies_entry__init
                     (Contrast__Api__Dtm__HttpRequest__NormalizedCookiesEntry         *message);
/* Contrast__Api__Dtm__HttpRequest methods */
void   contrast__api__dtm__http_request__init
                     (Contrast__Api__Dtm__HttpRequest         *message);
size_t contrast__api__dtm__http_request__get_packed_size
                     (const Contrast__Api__Dtm__HttpRequest   *message);
size_t contrast__api__dtm__http_request__pack
                     (const Contrast__Api__Dtm__HttpRequest   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__http_request__pack_to_buffer
                     (const Contrast__Api__Dtm__HttpRequest   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__HttpRequest *
       contrast__api__dtm__http_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__http_request__free_unpacked
                     (Contrast__Api__Dtm__HttpRequest *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__AgentEvent__OptionsEntry methods */
void   contrast__api__dtm__agent_event__options_entry__init
                     (Contrast__Api__Dtm__AgentEvent__OptionsEntry         *message);
/* Contrast__Api__Dtm__AgentEvent methods */
void   contrast__api__dtm__agent_event__init
                     (Contrast__Api__Dtm__AgentEvent         *message);
size_t contrast__api__dtm__agent_event__get_packed_size
                     (const Contrast__Api__Dtm__AgentEvent   *message);
size_t contrast__api__dtm__agent_event__pack
                     (const Contrast__Api__Dtm__AgentEvent   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__agent_event__pack_to_buffer
                     (const Contrast__Api__Dtm__AgentEvent   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__AgentEvent *
       contrast__api__dtm__agent_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__agent_event__free_unpacked
                     (Contrast__Api__Dtm__AgentEvent *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__HttpResponse__ResponseHeadersEntry methods */
void   contrast__api__dtm__http_response__response_headers_entry__init
                     (Contrast__Api__Dtm__HttpResponse__ResponseHeadersEntry         *message);
/* Contrast__Api__Dtm__HttpResponse__NormalizedResponseHeadersEntry methods */
void   contrast__api__dtm__http_response__normalized_response_headers_entry__init
                     (Contrast__Api__Dtm__HttpResponse__NormalizedResponseHeadersEntry         *message);
/* Contrast__Api__Dtm__HttpResponse methods */
void   contrast__api__dtm__http_response__init
                     (Contrast__Api__Dtm__HttpResponse         *message);
size_t contrast__api__dtm__http_response__get_packed_size
                     (const Contrast__Api__Dtm__HttpResponse   *message);
size_t contrast__api__dtm__http_response__pack
                     (const Contrast__Api__Dtm__HttpResponse   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__http_response__pack_to_buffer
                     (const Contrast__Api__Dtm__HttpResponse   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__HttpResponse *
       contrast__api__dtm__http_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__http_response__free_unpacked
                     (Contrast__Api__Dtm__HttpResponse *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__SimplePair methods */
void   contrast__api__dtm__simple_pair__init
                     (Contrast__Api__Dtm__SimplePair         *message);
size_t contrast__api__dtm__simple_pair__get_packed_size
                     (const Contrast__Api__Dtm__SimplePair   *message);
size_t contrast__api__dtm__simple_pair__pack
                     (const Contrast__Api__Dtm__SimplePair   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__simple_pair__pack_to_buffer
                     (const Contrast__Api__Dtm__SimplePair   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__SimplePair *
       contrast__api__dtm__simple_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__simple_pair__free_unpacked
                     (Contrast__Api__Dtm__SimplePair *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Pair methods */
void   contrast__api__dtm__pair__init
                     (Contrast__Api__Dtm__Pair         *message);
size_t contrast__api__dtm__pair__get_packed_size
                     (const Contrast__Api__Dtm__Pair   *message);
size_t contrast__api__dtm__pair__pack
                     (const Contrast__Api__Dtm__Pair   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__pair__pack_to_buffer
                     (const Contrast__Api__Dtm__Pair   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Pair *
       contrast__api__dtm__pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__pair__free_unpacked
                     (Contrast__Api__Dtm__Pair *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__AttackResult methods */
void   contrast__api__dtm__attack_result__init
                     (Contrast__Api__Dtm__AttackResult         *message);
size_t contrast__api__dtm__attack_result__get_packed_size
                     (const Contrast__Api__Dtm__AttackResult   *message);
size_t contrast__api__dtm__attack_result__pack
                     (const Contrast__Api__Dtm__AttackResult   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__attack_result__pack_to_buffer
                     (const Contrast__Api__Dtm__AttackResult   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__AttackResult *
       contrast__api__dtm__attack_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__attack_result__free_unpacked
                     (Contrast__Api__Dtm__AttackResult *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__RaspRuleSample methods */
void   contrast__api__dtm__rasp_rule_sample__init
                     (Contrast__Api__Dtm__RaspRuleSample         *message);
size_t contrast__api__dtm__rasp_rule_sample__get_packed_size
                     (const Contrast__Api__Dtm__RaspRuleSample   *message);
size_t contrast__api__dtm__rasp_rule_sample__pack
                     (const Contrast__Api__Dtm__RaspRuleSample   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__rasp_rule_sample__pack_to_buffer
                     (const Contrast__Api__Dtm__RaspRuleSample   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__RaspRuleSample *
       contrast__api__dtm__rasp_rule_sample__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__rasp_rule_sample__free_unpacked
                     (Contrast__Api__Dtm__RaspRuleSample *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__ModSecurityDetails methods */
void   contrast__api__dtm__mod_security_details__init
                     (Contrast__Api__Dtm__ModSecurityDetails         *message);
size_t contrast__api__dtm__mod_security_details__get_packed_size
                     (const Contrast__Api__Dtm__ModSecurityDetails   *message);
size_t contrast__api__dtm__mod_security_details__pack
                     (const Contrast__Api__Dtm__ModSecurityDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__mod_security_details__pack_to_buffer
                     (const Contrast__Api__Dtm__ModSecurityDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__ModSecurityDetails *
       contrast__api__dtm__mod_security_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__mod_security_details__free_unpacked
                     (Contrast__Api__Dtm__ModSecurityDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__ModSecurityLog__ParamsEntry methods */
void   contrast__api__dtm__mod_security_log__params_entry__init
                     (Contrast__Api__Dtm__ModSecurityLog__ParamsEntry         *message);
/* Contrast__Api__Dtm__ModSecurityLog methods */
void   contrast__api__dtm__mod_security_log__init
                     (Contrast__Api__Dtm__ModSecurityLog         *message);
size_t contrast__api__dtm__mod_security_log__get_packed_size
                     (const Contrast__Api__Dtm__ModSecurityLog   *message);
size_t contrast__api__dtm__mod_security_log__pack
                     (const Contrast__Api__Dtm__ModSecurityLog   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__mod_security_log__pack_to_buffer
                     (const Contrast__Api__Dtm__ModSecurityLog   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__ModSecurityLog *
       contrast__api__dtm__mod_security_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__mod_security_log__free_unpacked
                     (Contrast__Api__Dtm__ModSecurityLog *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__BruteForceDetails methods */
void   contrast__api__dtm__brute_force_details__init
                     (Contrast__Api__Dtm__BruteForceDetails         *message);
size_t contrast__api__dtm__brute_force_details__get_packed_size
                     (const Contrast__Api__Dtm__BruteForceDetails   *message);
size_t contrast__api__dtm__brute_force_details__pack
                     (const Contrast__Api__Dtm__BruteForceDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__brute_force_details__pack_to_buffer
                     (const Contrast__Api__Dtm__BruteForceDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__BruteForceDetails *
       contrast__api__dtm__brute_force_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__brute_force_details__free_unpacked
                     (Contrast__Api__Dtm__BruteForceDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__BotBlockerDetails methods */
void   contrast__api__dtm__bot_blocker_details__init
                     (Contrast__Api__Dtm__BotBlockerDetails         *message);
size_t contrast__api__dtm__bot_blocker_details__get_packed_size
                     (const Contrast__Api__Dtm__BotBlockerDetails   *message);
size_t contrast__api__dtm__bot_blocker_details__pack
                     (const Contrast__Api__Dtm__BotBlockerDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__bot_blocker_details__pack_to_buffer
                     (const Contrast__Api__Dtm__BotBlockerDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__BotBlockerDetails *
       contrast__api__dtm__bot_blocker_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__bot_blocker_details__free_unpacked
                     (Contrast__Api__Dtm__BotBlockerDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__CmdInjectionDetails methods */
void   contrast__api__dtm__cmd_injection_details__init
                     (Contrast__Api__Dtm__CmdInjectionDetails         *message);
size_t contrast__api__dtm__cmd_injection_details__get_packed_size
                     (const Contrast__Api__Dtm__CmdInjectionDetails   *message);
size_t contrast__api__dtm__cmd_injection_details__pack
                     (const Contrast__Api__Dtm__CmdInjectionDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__cmd_injection_details__pack_to_buffer
                     (const Contrast__Api__Dtm__CmdInjectionDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__CmdInjectionDetails *
       contrast__api__dtm__cmd_injection_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__cmd_injection_details__free_unpacked
                     (Contrast__Api__Dtm__CmdInjectionDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__CsrfDetails methods */
void   contrast__api__dtm__csrf_details__init
                     (Contrast__Api__Dtm__CsrfDetails         *message);
size_t contrast__api__dtm__csrf_details__get_packed_size
                     (const Contrast__Api__Dtm__CsrfDetails   *message);
size_t contrast__api__dtm__csrf_details__pack
                     (const Contrast__Api__Dtm__CsrfDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__csrf_details__pack_to_buffer
                     (const Contrast__Api__Dtm__CsrfDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__CsrfDetails *
       contrast__api__dtm__csrf_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__csrf_details__free_unpacked
                     (Contrast__Api__Dtm__CsrfDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__CveDetails methods */
void   contrast__api__dtm__cve_details__init
                     (Contrast__Api__Dtm__CveDetails         *message);
size_t contrast__api__dtm__cve_details__get_packed_size
                     (const Contrast__Api__Dtm__CveDetails   *message);
size_t contrast__api__dtm__cve_details__pack
                     (const Contrast__Api__Dtm__CveDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__cve_details__pack_to_buffer
                     (const Contrast__Api__Dtm__CveDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__CveDetails *
       contrast__api__dtm__cve_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__cve_details__free_unpacked
                     (Contrast__Api__Dtm__CveDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Cve20170898Details methods */
void   contrast__api__dtm__cve20170898_details__init
                     (Contrast__Api__Dtm__Cve20170898Details         *message);
size_t contrast__api__dtm__cve20170898_details__get_packed_size
                     (const Contrast__Api__Dtm__Cve20170898Details   *message);
size_t contrast__api__dtm__cve20170898_details__pack
                     (const Contrast__Api__Dtm__Cve20170898Details   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__cve20170898_details__pack_to_buffer
                     (const Contrast__Api__Dtm__Cve20170898Details   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Cve20170898Details *
       contrast__api__dtm__cve20170898_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__cve20170898_details__free_unpacked
                     (Contrast__Api__Dtm__Cve20170898Details *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Cve201714033Details methods */
void   contrast__api__dtm__cve201714033_details__init
                     (Contrast__Api__Dtm__Cve201714033Details         *message);
size_t contrast__api__dtm__cve201714033_details__get_packed_size
                     (const Contrast__Api__Dtm__Cve201714033Details   *message);
size_t contrast__api__dtm__cve201714033_details__pack
                     (const Contrast__Api__Dtm__Cve201714033Details   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__cve201714033_details__pack_to_buffer
                     (const Contrast__Api__Dtm__Cve201714033Details   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Cve201714033Details *
       contrast__api__dtm__cve201714033_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__cve201714033_details__free_unpacked
                     (Contrast__Api__Dtm__Cve201714033Details *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Cve201714064Details methods */
void   contrast__api__dtm__cve201714064_details__init
                     (Contrast__Api__Dtm__Cve201714064Details         *message);
size_t contrast__api__dtm__cve201714064_details__get_packed_size
                     (const Contrast__Api__Dtm__Cve201714064Details   *message);
size_t contrast__api__dtm__cve201714064_details__pack
                     (const Contrast__Api__Dtm__Cve201714064Details   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__cve201714064_details__pack_to_buffer
                     (const Contrast__Api__Dtm__Cve201714064Details   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Cve201714064Details *
       contrast__api__dtm__cve201714064_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__cve201714064_details__free_unpacked
                     (Contrast__Api__Dtm__Cve201714064Details *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__Cve201717405Details methods */
void   contrast__api__dtm__cve201717405_details__init
                     (Contrast__Api__Dtm__Cve201717405Details         *message);
size_t contrast__api__dtm__cve201717405_details__get_packed_size
                     (const Contrast__Api__Dtm__Cve201717405Details   *message);
size_t contrast__api__dtm__cve201717405_details__pack
                     (const Contrast__Api__Dtm__Cve201717405Details   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__cve201717405_details__pack_to_buffer
                     (const Contrast__Api__Dtm__Cve201717405Details   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__Cve201717405Details *
       contrast__api__dtm__cve201717405_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__cve201717405_details__free_unpacked
                     (Contrast__Api__Dtm__Cve201717405Details *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__HttpMethodTamperingDetails methods */
void   contrast__api__dtm__http_method_tampering_details__init
                     (Contrast__Api__Dtm__HttpMethodTamperingDetails         *message);
size_t contrast__api__dtm__http_method_tampering_details__get_packed_size
                     (const Contrast__Api__Dtm__HttpMethodTamperingDetails   *message);
size_t contrast__api__dtm__http_method_tampering_details__pack
                     (const Contrast__Api__Dtm__HttpMethodTamperingDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__http_method_tampering_details__pack_to_buffer
                     (const Contrast__Api__Dtm__HttpMethodTamperingDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__HttpMethodTamperingDetails *
       contrast__api__dtm__http_method_tampering_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__http_method_tampering_details__free_unpacked
                     (Contrast__Api__Dtm__HttpMethodTamperingDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__UntrustedDeserializationDetails methods */
void   contrast__api__dtm__untrusted_deserialization_details__init
                     (Contrast__Api__Dtm__UntrustedDeserializationDetails         *message);
size_t contrast__api__dtm__untrusted_deserialization_details__get_packed_size
                     (const Contrast__Api__Dtm__UntrustedDeserializationDetails   *message);
size_t contrast__api__dtm__untrusted_deserialization_details__pack
                     (const Contrast__Api__Dtm__UntrustedDeserializationDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__untrusted_deserialization_details__pack_to_buffer
                     (const Contrast__Api__Dtm__UntrustedDeserializationDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__UntrustedDeserializationDetails *
       contrast__api__dtm__untrusted_deserialization_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__untrusted_deserialization_details__free_unpacked
                     (Contrast__Api__Dtm__UntrustedDeserializationDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__ElInjectionDetails methods */
void   contrast__api__dtm__el_injection_details__init
                     (Contrast__Api__Dtm__ElInjectionDetails         *message);
size_t contrast__api__dtm__el_injection_details__get_packed_size
                     (const Contrast__Api__Dtm__ElInjectionDetails   *message);
size_t contrast__api__dtm__el_injection_details__pack
                     (const Contrast__Api__Dtm__ElInjectionDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__el_injection_details__pack_to_buffer
                     (const Contrast__Api__Dtm__ElInjectionDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__ElInjectionDetails *
       contrast__api__dtm__el_injection_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__el_injection_details__free_unpacked
                     (Contrast__Api__Dtm__ElInjectionDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__IpBlacklistDetails methods */
void   contrast__api__dtm__ip_blacklist_details__init
                     (Contrast__Api__Dtm__IpBlacklistDetails         *message);
size_t contrast__api__dtm__ip_blacklist_details__get_packed_size
                     (const Contrast__Api__Dtm__IpBlacklistDetails   *message);
size_t contrast__api__dtm__ip_blacklist_details__pack
                     (const Contrast__Api__Dtm__IpBlacklistDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__ip_blacklist_details__pack_to_buffer
                     (const Contrast__Api__Dtm__IpBlacklistDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__IpBlacklistDetails *
       contrast__api__dtm__ip_blacklist_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__ip_blacklist_details__free_unpacked
                     (Contrast__Api__Dtm__IpBlacklistDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__MarkOfTheBeastDetails methods */
void   contrast__api__dtm__mark_of_the_beast_details__init
                     (Contrast__Api__Dtm__MarkOfTheBeastDetails         *message);
size_t contrast__api__dtm__mark_of_the_beast_details__get_packed_size
                     (const Contrast__Api__Dtm__MarkOfTheBeastDetails   *message);
size_t contrast__api__dtm__mark_of_the_beast_details__pack
                     (const Contrast__Api__Dtm__MarkOfTheBeastDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__mark_of_the_beast_details__pack_to_buffer
                     (const Contrast__Api__Dtm__MarkOfTheBeastDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__MarkOfTheBeastDetails *
       contrast__api__dtm__mark_of_the_beast_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__mark_of_the_beast_details__free_unpacked
                     (Contrast__Api__Dtm__MarkOfTheBeastDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__PaddingOracleDetails methods */
void   contrast__api__dtm__padding_oracle_details__init
                     (Contrast__Api__Dtm__PaddingOracleDetails         *message);
size_t contrast__api__dtm__padding_oracle_details__get_packed_size
                     (const Contrast__Api__Dtm__PaddingOracleDetails   *message);
size_t contrast__api__dtm__padding_oracle_details__pack
                     (const Contrast__Api__Dtm__PaddingOracleDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__padding_oracle_details__pack_to_buffer
                     (const Contrast__Api__Dtm__PaddingOracleDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__PaddingOracleDetails *
       contrast__api__dtm__padding_oracle_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__padding_oracle_details__free_unpacked
                     (Contrast__Api__Dtm__PaddingOracleDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__PathTraversalDetails methods */
void   contrast__api__dtm__path_traversal_details__init
                     (Contrast__Api__Dtm__PathTraversalDetails         *message);
size_t contrast__api__dtm__path_traversal_details__get_packed_size
                     (const Contrast__Api__Dtm__PathTraversalDetails   *message);
size_t contrast__api__dtm__path_traversal_details__pack
                     (const Contrast__Api__Dtm__PathTraversalDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__path_traversal_details__pack_to_buffer
                     (const Contrast__Api__Dtm__PathTraversalDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__PathTraversalDetails *
       contrast__api__dtm__path_traversal_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__path_traversal_details__free_unpacked
                     (Contrast__Api__Dtm__PathTraversalDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__ReDosDetails methods */
void   contrast__api__dtm__re_dos_details__init
                     (Contrast__Api__Dtm__ReDosDetails         *message);
size_t contrast__api__dtm__re_dos_details__get_packed_size
                     (const Contrast__Api__Dtm__ReDosDetails   *message);
size_t contrast__api__dtm__re_dos_details__pack
                     (const Contrast__Api__Dtm__ReDosDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__re_dos_details__pack_to_buffer
                     (const Contrast__Api__Dtm__ReDosDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__ReDosDetails *
       contrast__api__dtm__re_dos_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__re_dos_details__free_unpacked
                     (Contrast__Api__Dtm__ReDosDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__SqlInjectionDetails methods */
void   contrast__api__dtm__sql_injection_details__init
                     (Contrast__Api__Dtm__SqlInjectionDetails         *message);
size_t contrast__api__dtm__sql_injection_details__get_packed_size
                     (const Contrast__Api__Dtm__SqlInjectionDetails   *message);
size_t contrast__api__dtm__sql_injection_details__pack
                     (const Contrast__Api__Dtm__SqlInjectionDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__sql_injection_details__pack_to_buffer
                     (const Contrast__Api__Dtm__SqlInjectionDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__SqlInjectionDetails *
       contrast__api__dtm__sql_injection_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__sql_injection_details__free_unpacked
                     (Contrast__Api__Dtm__SqlInjectionDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__NoSqlInjectionDetails methods */
void   contrast__api__dtm__no_sql_injection_details__init
                     (Contrast__Api__Dtm__NoSqlInjectionDetails         *message);
size_t contrast__api__dtm__no_sql_injection_details__get_packed_size
                     (const Contrast__Api__Dtm__NoSqlInjectionDetails   *message);
size_t contrast__api__dtm__no_sql_injection_details__pack
                     (const Contrast__Api__Dtm__NoSqlInjectionDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__no_sql_injection_details__pack_to_buffer
                     (const Contrast__Api__Dtm__NoSqlInjectionDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__NoSqlInjectionDetails *
       contrast__api__dtm__no_sql_injection_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__no_sql_injection_details__free_unpacked
                     (Contrast__Api__Dtm__NoSqlInjectionDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__SsrfDetails methods */
void   contrast__api__dtm__ssrf_details__init
                     (Contrast__Api__Dtm__SsrfDetails         *message);
size_t contrast__api__dtm__ssrf_details__get_packed_size
                     (const Contrast__Api__Dtm__SsrfDetails   *message);
size_t contrast__api__dtm__ssrf_details__pack
                     (const Contrast__Api__Dtm__SsrfDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__ssrf_details__pack_to_buffer
                     (const Contrast__Api__Dtm__SsrfDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__SsrfDetails *
       contrast__api__dtm__ssrf_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__ssrf_details__free_unpacked
                     (Contrast__Api__Dtm__SsrfDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__VirtualPatchDetails methods */
void   contrast__api__dtm__virtual_patch_details__init
                     (Contrast__Api__Dtm__VirtualPatchDetails         *message);
size_t contrast__api__dtm__virtual_patch_details__get_packed_size
                     (const Contrast__Api__Dtm__VirtualPatchDetails   *message);
size_t contrast__api__dtm__virtual_patch_details__pack
                     (const Contrast__Api__Dtm__VirtualPatchDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__virtual_patch_details__pack_to_buffer
                     (const Contrast__Api__Dtm__VirtualPatchDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__VirtualPatchDetails *
       contrast__api__dtm__virtual_patch_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__virtual_patch_details__free_unpacked
                     (Contrast__Api__Dtm__VirtualPatchDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__XssDetails methods */
void   contrast__api__dtm__xss_details__init
                     (Contrast__Api__Dtm__XssDetails         *message);
size_t contrast__api__dtm__xss_details__get_packed_size
                     (const Contrast__Api__Dtm__XssDetails   *message);
size_t contrast__api__dtm__xss_details__pack
                     (const Contrast__Api__Dtm__XssDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__xss_details__pack_to_buffer
                     (const Contrast__Api__Dtm__XssDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__XssDetails *
       contrast__api__dtm__xss_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__xss_details__free_unpacked
                     (Contrast__Api__Dtm__XssDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__XssMatch methods */
void   contrast__api__dtm__xss_match__init
                     (Contrast__Api__Dtm__XssMatch         *message);
size_t contrast__api__dtm__xss_match__get_packed_size
                     (const Contrast__Api__Dtm__XssMatch   *message);
size_t contrast__api__dtm__xss_match__pack
                     (const Contrast__Api__Dtm__XssMatch   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__xss_match__pack_to_buffer
                     (const Contrast__Api__Dtm__XssMatch   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__XssMatch *
       contrast__api__dtm__xss_match__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__xss_match__free_unpacked
                     (Contrast__Api__Dtm__XssMatch *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__XxeDetails methods */
void   contrast__api__dtm__xxe_details__init
                     (Contrast__Api__Dtm__XxeDetails         *message);
size_t contrast__api__dtm__xxe_details__get_packed_size
                     (const Contrast__Api__Dtm__XxeDetails   *message);
size_t contrast__api__dtm__xxe_details__pack
                     (const Contrast__Api__Dtm__XxeDetails   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__xxe_details__pack_to_buffer
                     (const Contrast__Api__Dtm__XxeDetails   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__XxeDetails *
       contrast__api__dtm__xxe_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__xxe_details__free_unpacked
                     (Contrast__Api__Dtm__XxeDetails *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__XxeMatch methods */
void   contrast__api__dtm__xxe_match__init
                     (Contrast__Api__Dtm__XxeMatch         *message);
size_t contrast__api__dtm__xxe_match__get_packed_size
                     (const Contrast__Api__Dtm__XxeMatch   *message);
size_t contrast__api__dtm__xxe_match__pack
                     (const Contrast__Api__Dtm__XxeMatch   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__xxe_match__pack_to_buffer
                     (const Contrast__Api__Dtm__XxeMatch   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__XxeMatch *
       contrast__api__dtm__xxe_match__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__xxe_match__free_unpacked
                     (Contrast__Api__Dtm__XxeMatch *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__XxeWrapper methods */
void   contrast__api__dtm__xxe_wrapper__init
                     (Contrast__Api__Dtm__XxeWrapper         *message);
size_t contrast__api__dtm__xxe_wrapper__get_packed_size
                     (const Contrast__Api__Dtm__XxeWrapper   *message);
size_t contrast__api__dtm__xxe_wrapper__pack
                     (const Contrast__Api__Dtm__XxeWrapper   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__xxe_wrapper__pack_to_buffer
                     (const Contrast__Api__Dtm__XxeWrapper   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__XxeWrapper *
       contrast__api__dtm__xxe_wrapper__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__xxe_wrapper__free_unpacked
                     (Contrast__Api__Dtm__XxeWrapper *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__UserInput methods */
void   contrast__api__dtm__user_input__init
                     (Contrast__Api__Dtm__UserInput         *message);
size_t contrast__api__dtm__user_input__get_packed_size
                     (const Contrast__Api__Dtm__UserInput   *message);
size_t contrast__api__dtm__user_input__pack
                     (const Contrast__Api__Dtm__UserInput   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__user_input__pack_to_buffer
                     (const Contrast__Api__Dtm__UserInput   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__UserInput *
       contrast__api__dtm__user_input__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__user_input__free_unpacked
                     (Contrast__Api__Dtm__UserInput *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__StackTraceElement methods */
void   contrast__api__dtm__stack_trace_element__init
                     (Contrast__Api__Dtm__StackTraceElement         *message);
size_t contrast__api__dtm__stack_trace_element__get_packed_size
                     (const Contrast__Api__Dtm__StackTraceElement   *message);
size_t contrast__api__dtm__stack_trace_element__pack
                     (const Contrast__Api__Dtm__StackTraceElement   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__stack_trace_element__pack_to_buffer
                     (const Contrast__Api__Dtm__StackTraceElement   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__StackTraceElement *
       contrast__api__dtm__stack_trace_element__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__stack_trace_element__free_unpacked
                     (Contrast__Api__Dtm__StackTraceElement *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__TraceEvent methods */
void   contrast__api__dtm__trace_event__init
                     (Contrast__Api__Dtm__TraceEvent         *message);
size_t contrast__api__dtm__trace_event__get_packed_size
                     (const Contrast__Api__Dtm__TraceEvent   *message);
size_t contrast__api__dtm__trace_event__pack
                     (const Contrast__Api__Dtm__TraceEvent   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__trace_event__pack_to_buffer
                     (const Contrast__Api__Dtm__TraceEvent   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__TraceEvent *
       contrast__api__dtm__trace_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__trace_event__free_unpacked
                     (Contrast__Api__Dtm__TraceEvent *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__EventSignature methods */
void   contrast__api__dtm__event_signature__init
                     (Contrast__Api__Dtm__EventSignature         *message);
size_t contrast__api__dtm__event_signature__get_packed_size
                     (const Contrast__Api__Dtm__EventSignature   *message);
size_t contrast__api__dtm__event_signature__pack
                     (const Contrast__Api__Dtm__EventSignature   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__event_signature__pack_to_buffer
                     (const Contrast__Api__Dtm__EventSignature   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__EventSignature *
       contrast__api__dtm__event_signature__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__event_signature__free_unpacked
                     (Contrast__Api__Dtm__EventSignature *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__EventSources methods */
void   contrast__api__dtm__event_sources__init
                     (Contrast__Api__Dtm__EventSources         *message);
size_t contrast__api__dtm__event_sources__get_packed_size
                     (const Contrast__Api__Dtm__EventSources   *message);
size_t contrast__api__dtm__event_sources__pack
                     (const Contrast__Api__Dtm__EventSources   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__event_sources__pack_to_buffer
                     (const Contrast__Api__Dtm__EventSources   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__EventSources *
       contrast__api__dtm__event_sources__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__event_sources__free_unpacked
                     (Contrast__Api__Dtm__EventSources *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__TraceEventObject methods */
void   contrast__api__dtm__trace_event_object__init
                     (Contrast__Api__Dtm__TraceEventObject         *message);
size_t contrast__api__dtm__trace_event_object__get_packed_size
                     (const Contrast__Api__Dtm__TraceEventObject   *message);
size_t contrast__api__dtm__trace_event_object__pack
                     (const Contrast__Api__Dtm__TraceEventObject   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__trace_event_object__pack_to_buffer
                     (const Contrast__Api__Dtm__TraceEventObject   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__TraceEventObject *
       contrast__api__dtm__trace_event_object__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__trace_event_object__free_unpacked
                     (Contrast__Api__Dtm__TraceEventObject *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__TagRange methods */
void   contrast__api__dtm__tag_range__init
                     (Contrast__Api__Dtm__TagRange         *message);
size_t contrast__api__dtm__tag_range__get_packed_size
                     (const Contrast__Api__Dtm__TagRange   *message);
size_t contrast__api__dtm__tag_range__pack
                     (const Contrast__Api__Dtm__TagRange   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__tag_range__pack_to_buffer
                     (const Contrast__Api__Dtm__TagRange   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__TagRange *
       contrast__api__dtm__tag_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__tag_range__free_unpacked
                     (Contrast__Api__Dtm__TagRange *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Dtm__TraceStack methods */
void   contrast__api__dtm__trace_stack__init
                     (Contrast__Api__Dtm__TraceStack         *message);
size_t contrast__api__dtm__trace_stack__get_packed_size
                     (const Contrast__Api__Dtm__TraceStack   *message);
size_t contrast__api__dtm__trace_stack__pack
                     (const Contrast__Api__Dtm__TraceStack   *message,
                      uint8_t             *out);
size_t contrast__api__dtm__trace_stack__pack_to_buffer
                     (const Contrast__Api__Dtm__TraceStack   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Dtm__TraceStack *
       contrast__api__dtm__trace_stack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__dtm__trace_stack__free_unpacked
                     (Contrast__Api__Dtm__TraceStack *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Contrast__Api__Dtm__Message_Closure)
                 (const Contrast__Api__Dtm__Message *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ServerActivity__LogEnhancersEntry_Closure)
                 (const Contrast__Api__Dtm__ServerActivity__LogEnhancersEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ServerActivity__IpBlacklistsEntry_Closure)
                 (const Contrast__Api__Dtm__ServerActivity__IpBlacklistsEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ServerActivity_Closure)
                 (const Contrast__Api__Dtm__ServerActivity *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__AgentStartup_Closure)
                 (const Contrast__Api__Dtm__AgentStartup *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ApplicationCreate_Closure)
                 (const Contrast__Api__Dtm__ApplicationCreate *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ApplicationUpdate__TechnologiesEntry_Closure)
                 (const Contrast__Api__Dtm__ApplicationUpdate__TechnologiesEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ApplicationUpdate__LibrariesEntry_Closure)
                 (const Contrast__Api__Dtm__ApplicationUpdate__LibrariesEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ApplicationUpdate_Closure)
                 (const Contrast__Api__Dtm__ApplicationUpdate *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Activity__TechnologiesEntry_Closure)
                 (const Contrast__Api__Dtm__Activity__TechnologiesEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Activity__LibraryUsagesEntry_Closure)
                 (const Contrast__Api__Dtm__Activity__LibraryUsagesEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Activity_Closure)
                 (const Contrast__Api__Dtm__Activity *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Finding__PropertiesEntry_Closure)
                 (const Contrast__Api__Dtm__Finding__PropertiesEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Finding_Closure)
                 (const Contrast__Api__Dtm__Finding *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__PossibleSecurityControl_Closure)
                 (const Contrast__Api__Dtm__PossibleSecurityControl *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__View_Closure)
                 (const Contrast__Api__Dtm__View *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Platform_Closure)
                 (const Contrast__Api__Dtm__Platform *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ArchitectureComponent_Closure)
                 (const Contrast__Api__Dtm__ArchitectureComponent *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Library_Closure)
                 (const Contrast__Api__Dtm__Library *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__LibraryUsageUpdate__ClassNamesEntry_Closure)
                 (const Contrast__Api__Dtm__LibraryUsageUpdate__ClassNamesEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__LibraryUsageUpdate_Closure)
                 (const Contrast__Api__Dtm__LibraryUsageUpdate *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Address_Closure)
                 (const Contrast__Api__Dtm__Address *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__RawRequest_Closure)
                 (const Contrast__Api__Dtm__RawRequest *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__HttpRequest__NormalizedRequestParamsEntry_Closure)
                 (const Contrast__Api__Dtm__HttpRequest__NormalizedRequestParamsEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__HttpRequest__RequestHeadersEntry_Closure)
                 (const Contrast__Api__Dtm__HttpRequest__RequestHeadersEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__HttpRequest__NormalizedRequestHeadersEntry_Closure)
                 (const Contrast__Api__Dtm__HttpRequest__NormalizedRequestHeadersEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__HttpRequest__NormalizedCookiesEntry_Closure)
                 (const Contrast__Api__Dtm__HttpRequest__NormalizedCookiesEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__HttpRequest_Closure)
                 (const Contrast__Api__Dtm__HttpRequest *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__AgentEvent__OptionsEntry_Closure)
                 (const Contrast__Api__Dtm__AgentEvent__OptionsEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__AgentEvent_Closure)
                 (const Contrast__Api__Dtm__AgentEvent *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__HttpResponse__ResponseHeadersEntry_Closure)
                 (const Contrast__Api__Dtm__HttpResponse__ResponseHeadersEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__HttpResponse__NormalizedResponseHeadersEntry_Closure)
                 (const Contrast__Api__Dtm__HttpResponse__NormalizedResponseHeadersEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__HttpResponse_Closure)
                 (const Contrast__Api__Dtm__HttpResponse *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__SimplePair_Closure)
                 (const Contrast__Api__Dtm__SimplePair *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Pair_Closure)
                 (const Contrast__Api__Dtm__Pair *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__AttackResult_Closure)
                 (const Contrast__Api__Dtm__AttackResult *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__RaspRuleSample_Closure)
                 (const Contrast__Api__Dtm__RaspRuleSample *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ModSecurityDetails_Closure)
                 (const Contrast__Api__Dtm__ModSecurityDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ModSecurityLog__ParamsEntry_Closure)
                 (const Contrast__Api__Dtm__ModSecurityLog__ParamsEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ModSecurityLog_Closure)
                 (const Contrast__Api__Dtm__ModSecurityLog *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__BruteForceDetails_Closure)
                 (const Contrast__Api__Dtm__BruteForceDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__BotBlockerDetails_Closure)
                 (const Contrast__Api__Dtm__BotBlockerDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__CmdInjectionDetails_Closure)
                 (const Contrast__Api__Dtm__CmdInjectionDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__CsrfDetails_Closure)
                 (const Contrast__Api__Dtm__CsrfDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__CveDetails_Closure)
                 (const Contrast__Api__Dtm__CveDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Cve20170898Details_Closure)
                 (const Contrast__Api__Dtm__Cve20170898Details *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Cve201714033Details_Closure)
                 (const Contrast__Api__Dtm__Cve201714033Details *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Cve201714064Details_Closure)
                 (const Contrast__Api__Dtm__Cve201714064Details *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__Cve201717405Details_Closure)
                 (const Contrast__Api__Dtm__Cve201717405Details *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__HttpMethodTamperingDetails_Closure)
                 (const Contrast__Api__Dtm__HttpMethodTamperingDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__UntrustedDeserializationDetails_Closure)
                 (const Contrast__Api__Dtm__UntrustedDeserializationDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ElInjectionDetails_Closure)
                 (const Contrast__Api__Dtm__ElInjectionDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__IpBlacklistDetails_Closure)
                 (const Contrast__Api__Dtm__IpBlacklistDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__MarkOfTheBeastDetails_Closure)
                 (const Contrast__Api__Dtm__MarkOfTheBeastDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__PaddingOracleDetails_Closure)
                 (const Contrast__Api__Dtm__PaddingOracleDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__PathTraversalDetails_Closure)
                 (const Contrast__Api__Dtm__PathTraversalDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__ReDosDetails_Closure)
                 (const Contrast__Api__Dtm__ReDosDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__SqlInjectionDetails_Closure)
                 (const Contrast__Api__Dtm__SqlInjectionDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__NoSqlInjectionDetails_Closure)
                 (const Contrast__Api__Dtm__NoSqlInjectionDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__SsrfDetails_Closure)
                 (const Contrast__Api__Dtm__SsrfDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__VirtualPatchDetails_Closure)
                 (const Contrast__Api__Dtm__VirtualPatchDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__XssDetails_Closure)
                 (const Contrast__Api__Dtm__XssDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__XssMatch_Closure)
                 (const Contrast__Api__Dtm__XssMatch *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__XxeDetails_Closure)
                 (const Contrast__Api__Dtm__XxeDetails *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__XxeMatch_Closure)
                 (const Contrast__Api__Dtm__XxeMatch *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__XxeWrapper_Closure)
                 (const Contrast__Api__Dtm__XxeWrapper *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__UserInput_Closure)
                 (const Contrast__Api__Dtm__UserInput *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__StackTraceElement_Closure)
                 (const Contrast__Api__Dtm__StackTraceElement *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__TraceEvent_Closure)
                 (const Contrast__Api__Dtm__TraceEvent *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__EventSignature_Closure)
                 (const Contrast__Api__Dtm__EventSignature *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__EventSources_Closure)
                 (const Contrast__Api__Dtm__EventSources *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__TraceEventObject_Closure)
                 (const Contrast__Api__Dtm__TraceEventObject *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__TagRange_Closure)
                 (const Contrast__Api__Dtm__TagRange *message,
                  void *closure_data);
typedef void (*Contrast__Api__Dtm__TraceStack_Closure)
                 (const Contrast__Api__Dtm__TraceStack *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor contrast__api__dtm__message__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__server_activity__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__server_activity__log_enhancers_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__server_activity__ip_blacklists_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__agent_startup__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__application_create__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__application_update__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__application_update__technologies_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__application_update__libraries_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__activity__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__activity__technologies_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__activity__library_usages_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__finding__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__finding__properties_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__possible_security_control__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__view__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__platform__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__architecture_component__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__library__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__library_usage_update__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__library_usage_update__class_names_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__address__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__raw_request__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__http_request__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__http_request__normalized_request_params_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__http_request__request_headers_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__http_request__normalized_request_headers_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__http_request__normalized_cookies_entry__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__dtm__http_request__authentication__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__dtm__http_request__document_type__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__agent_event__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__agent_event__options_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__http_response__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__http_response__response_headers_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__http_response__normalized_response_headers_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__simple_pair__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__pair__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__attack_result__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__dtm__attack_result__response_type__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__rasp_rule_sample__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__mod_security_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__mod_security_log__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__mod_security_log__params_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__brute_force_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__bot_blocker_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__cmd_injection_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__csrf_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__cve_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__cve20170898_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__cve201714033_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__cve201714064_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__cve201717405_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__http_method_tampering_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__untrusted_deserialization_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__el_injection_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__ip_blacklist_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__mark_of_the_beast_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__padding_oracle_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__path_traversal_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__re_dos_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__sql_injection_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__no_sql_injection_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__ssrf_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__virtual_patch_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__xss_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__xss_match__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__xxe_details__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__xxe_match__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__xxe_wrapper__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__user_input__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__dtm__user_input__input_type__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__stack_trace_element__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__trace_event__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__dtm__trace_event__action__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__event_signature__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__event_sources__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__trace_event_object__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__tag_range__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__dtm__trace_stack__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_dtm_2eproto__INCLUDED */
