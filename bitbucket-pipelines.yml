image: python:3.6
max-time: 20
clone:
  depth: full
definitions:
    build_steps_deb: &build_all_deb
      - apt-get install autoconf automake libtool -y
      - git submodule update --init --recursive
      - ./bitbucket_scripts/build_protobuf-c.sh
      - mkdir pkgs
      - make module_version.h
      - ./build_module.sh -y -o `pwd`/pkgs -n contrast -v 1.14.0 .

    build_steps_rpm: &build_all_rpm
      - yum install autoconf automake libtool -y
      - git submodule update --init --recursive
      - ./bitbucket_scripts/build_protobuf-c.sh
      - mkdir pkgs
      - make module_version.h
      - ./build_module.sh -y -o `pwd`/pkgs -n contrast -v 1.14.0 .

    parallel: &build_all_artifacts
      - step:
          name: src dist
          image: contrast/proxy-pipeline-environment:ubuntu-18
          script:
              - make dist
          # nothing is being done with this currently. I expect whatever is
          # here to change once we move to github.
          artifacts:
              - contrast-webserver-agent-nginx-*.tar.gz
      - step:
          name: ubuntu-18 nginx-1.14.0 pkg
          image: contrast/proxy-pipeline-environment:ubuntu-18
          script: *build_all_deb
          artifacts:
              - pkgs/*
      - step:
          name: ubuntu-16 nginx-1.14.0 pkg
          image: contrast/proxy-pipeline-environment:ubuntu-16
          script: *build_all_deb
          artifacts:
              - pkgs/*
      - step:
          name: ubuntu-14 nginx-1.14.0 pkg
          image: contrast/proxy-pipeline-environment:ubuntu-14
          script: *build_all_deb
          artifacts:
              - pkgs/*
      - step:
          name: centos7 nginx-1.14.0 pkg
          image: contrast/proxy-pipeline-environment:centos-7
          script: *build_all_rpm
          artifacts:
              - pkgs/*

    step: &deployToTSStaging
      name: Deploy to TS Staging
      max-time: 3
      deployment: staging
      script:
        - apt-get update && apt-get install -fy awscli
        - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_STAGING && export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_STAGING
        - python bitbucket_scripts/deploy_to_s3.py pkgs staging


    nginxTests: &nginx_tests
      name: Nginx Tests
      image: ubuntu
      script:
        - apt-get update -y && apt-get install -y curl gnupg2
        - curl https://contrastsecurity.jfrog.io/contrastsecurity/api/gpg/key/public | apt-key add -
        - echo "deb https://contrastsecurity.jfrog.io/contrastsecurity/debian-staging/ bionic contrast" > /etc/apt/sources.list.d/contrast.list
        - apt-get update && apt-get install -y contrast-modsecurity contrast-service
        - ./bitbucket_scripts/run_nginx_test.sh
        - mv docker-builds/nginx.conf /usr/local/nginx/conf/nginx.conf
        - mv docker-builds/contrast_security.yml /etc/contrast/webserver/contrast_security.yaml
        - git clone https://github.com/nginx/nginx-tests.git
        - (/usr/bin/Contrast-Service &) && cd nginx-tests && TEST_NGINX_GLOBALS="load_module modules/ngx_http_contrast_connector_module.so;" TEST_NGINX_GLOBALS_HTTP="contrast on;" TEST_NGINX_BINARY=/usr/local/nginx/sbin/nginx prove .

pipelines:
  default:
    - parallel: *build_all_artifacts
    - step: *nginx_tests
  branches:
    develop:
        - parallel: *build_all_artifacts
        - step:
            name: deploy pkgs to staging
            image: contrast/proxy-pipeline-environment:ubuntu-18
            script:
                - ls -lah pkgs
                - bitbucket_scripts/deploy.sh pkgs staging
        - step: *deployToTSStaging
    master:
        - parallel: *build_all_artifacts
        - step:
            name: deploy pkgs to staging
            image: contrast/proxy-pipeline-environment:ubuntu-18
            script:
                - ls -lah pkgs
                - bitbucket_scripts/deploy.sh pkgs staging
        - step: *deployToTSStaging
  tags:
    '*/*.*.*':
        - parallel: *build_all_artifacts
        - step:
            name: deploy pkgs to public
            image: contrast/proxy-pipeline-environment:ubuntu-18
            script:
                - ls -lah pkgs
                - bitbucket_scripts/deploy.sh pkgs public
        - step: *deployToTSStaging
        - step:
            name: Deploy to SAAS (App)
            image:
                name: 763284681916.dkr.ecr.us-east-1.amazonaws.com/deployer-production-saas-deploy
                aws:
                    access-key: $AWS_ACCESS_KEY_ID_PROD
                    secret-key: $AWS_SECRET_ACCESS_KEY_PROD
            script:
            - revision=$(TZ=UTC git show -s --format=%cd --date=format-local:%Y%m%d-%H%M HEAD).$(git rev-parse --short HEAD)
            - tag=$(git describe --tags --exact-match $BITBUCKET_COMMIT)
            - echo "Got the following Deploy Tag - $tag  Revision - $revision"
            - IFS='/' read -r release_ticket release_version <<<"$tag"
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_PROD $AWS_SECRET_ACCESS_KEY_PROD production
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_STAGING $AWS_SECRET_ACCESS_KEY_STAGING staging
            - deployer.py --single --environment saas --artifact webserver-agent-nginx --release-version $revision --release-ticket https://contrast.atlassian.net/browse/${release_ticket} --filename webserver-agent-bundle-${revision}.zip
  
  custom:
    alpha-deploy:
        - step:
            name: Deploy to Alpha
            image:
                name: 763284681916.dkr.ecr.us-east-1.amazonaws.com/deployer-production-saas-deploy
                aws:
                    access-key: $AWS_ACCESS_KEY_ID_PROD
                    secret-key: $AWS_SECRET_ACCESS_KEY_PROD
            script:
            - revision=$(TZ=UTC git show -s --format=%cd --date=format-local:%Y%m%d-%H%M HEAD).$(git rev-parse --short HEAD)
            - tag=$(git describe --tags --exact-match $BITBUCKET_COMMIT)
            - echo "Got the following Deploy Tag - $tag  Revision - $revision"
            - IFS='/' read -r release_ticket release_version <<<"$tag"
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_PROD $AWS_SECRET_ACCESS_KEY_PROD production
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_STAGING $AWS_SECRET_ACCESS_KEY_STAGING staging
            - deployer.py --single --environment alpha --artifact webserver-agent-nginx --release-version $revision --release-ticket https://contrast.atlassian.net/browse/${release_ticket} --filename webserver-agent-bundle-${revision}.zip
    apptwo-deploy:
        - step:
            name: Deploy to Apptwo
            image:
                name: 763284681916.dkr.ecr.us-east-1.amazonaws.com/deployer-production-saas-deploy
                aws:
                    access-key: $AWS_ACCESS_KEY_ID_PROD
                    secret-key: $AWS_SECRET_ACCESS_KEY_PROD
            script:
            - revision=$(TZ=UTC git show -s --format=%cd --date=format-local:%Y%m%d-%H%M HEAD).$(git rev-parse --short HEAD)
            - tag=$(git describe --tags --exact-match $BITBUCKET_COMMIT)
            - echo "Got the following Deploy Tag - $tag  Revision - $revision"
            - IFS='/' read -r release_ticket release_version <<<"$tag"
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_PROD $AWS_SECRET_ACCESS_KEY_PROD production
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_STAGING $AWS_SECRET_ACCESS_KEY_STAGING staging
            - deployer.py --single --environment apptwo --artifact webserver-agent-nginx --release-version $revision --release-ticket https://contrast.atlassian.net/browse/${release_ticket} --filename webserver-agent-bundle-${revision}.zip
    saas-deploy:
        - step:
            name: Deploy to SAAS (App)
            image:
                name: 763284681916.dkr.ecr.us-east-1.amazonaws.com/deployer-production-saas-deploy
                aws:
                    access-key: $AWS_ACCESS_KEY_ID_PROD
                    secret-key: $AWS_SECRET_ACCESS_KEY_PROD
            script:
            - revision=$(TZ=UTC git show -s --format=%cd --date=format-local:%Y%m%d-%H%M HEAD).$(git rev-parse --short HEAD)
            - tag=$(git describe --tags --exact-match $BITBUCKET_COMMIT)
            - echo "Got the following Deploy Tag - $tag  Revision - $revision"
            - IFS='/' read -r release_ticket release_version <<<"$tag"
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_PROD $AWS_SECRET_ACCESS_KEY_PROD production
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_STAGING $AWS_SECRET_ACCESS_KEY_STAGING staging
            - deployer.py --single --environment saas --artifact webserver-agent-nginx --release-version $revision --release-ticket https://contrast.atlassian.net/browse/${release_ticket} --filename webserver-agent-bundle-${revision}.zip
    eval-deploy:
        - step:
            name: Deploy to Eval
            image:
                name: 763284681916.dkr.ecr.us-east-1.amazonaws.com/deployer-production-saas-deploy
                aws:
                    access-key: $AWS_ACCESS_KEY_ID_PROD
                    secret-key: $AWS_SECRET_ACCESS_KEY_PROD
            script:
            - revision=$(TZ=UTC git show -s --format=%cd --date=format-local:%Y%m%d-%H%M HEAD).$(git rev-parse --short HEAD)
            - tag=$(git describe --tags --exact-match $BITBUCKET_COMMIT)
            - echo "Got the following Deploy Tag - $tag  Revision - $revision"
            - IFS='/' read -r release_ticket release_version <<<"$tag"
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_PROD $AWS_SECRET_ACCESS_KEY_PROD production
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_STAGING $AWS_SECRET_ACCESS_KEY_STAGING staging
            - deployer.py --single --environment Eval --artifact webserver-agent-nginx --release-version $revision --release-ticket https://contrast.atlassian.net/browse/${release_ticket} --filename webserver-agent-bundle-${revision}.zip
    ce-deploy:
        - step:
            name: Deploy to Community Edition (CE)
            image:
                name: 763284681916.dkr.ecr.us-east-1.amazonaws.com/deployer-production-saas-deploy
                aws:
                    access-key: $AWS_ACCESS_KEY_ID_PROD
                    secret-key: $AWS_SECRET_ACCESS_KEY_PROD
            script:
            - revision=$(TZ=UTC git show -s --format=%cd --date=format-local:%Y%m%d-%H%M HEAD).$(git rev-parse --short HEAD)
            - tag=$(git describe --tags --exact-match $BITBUCKET_COMMIT)
            - echo "Got the following Deploy Tag - $tag  Revision - $revision"
            - IFS='/' read -r release_ticket release_version <<<"$tag"
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_PROD $AWS_SECRET_ACCESS_KEY_PROD production
            - create_aws_profile.sh $AWS_ACCESS_KEY_ID_STAGING $AWS_SECRET_ACCESS_KEY_STAGING staging
            - deployer.py --single --environment ce --artifact webserver-agent-nginx--release-version $revision --release-ticket https://contrast.atlassian.net/browse/${release_ticket} --filename webserver-agent-bundle-${revision}.zip