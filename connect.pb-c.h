/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: connect.proto */

#ifndef PROTOBUF_C_connect_2eproto__INCLUDED
#define PROTOBUF_C_connect_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Contrast__Api__Connect__Pair Contrast__Api__Connect__Pair;
typedef struct _Contrast__Api__Connect__Request Contrast__Api__Connect__Request;
typedef struct _Contrast__Api__Connect__Response Contrast__Api__Connect__Response;


/* --- enums --- */


/* --- messages --- */

struct  _Contrast__Api__Connect__Pair
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define CONTRAST__API__CONNECT__PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__connect__pair__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Connect__Request
{
  ProtobufCMessage base;
  /*
   * string identifying the client + pid forma a unique id across agent
   */
  char *client_id;
  /*
   * string representing connector type (nginx, apache etc). This should
   * include the webserver name and version.  ie. nginx-1.14.0
   */
  char *connector_type;
  /*
   * connector code version.
   */
  char *connector_version;
  /*
   * process id for the agent
   */
  int64_t pid;
  /*
   * number of messages sent by this agent since startup
   */
  int32_t message_count;
  /*
   * the timestamp when this message was created 
   */
  int64_t timestamp_ms;
  /*
   * name of the protected application 
   */
  char *app_name;
  /*
   * language of the protected application 
   */
  char *app_language;
  /*
   * unique id for this request (e.g. transaction id in nginx)
   */
  char *uuid;
  /*
   * 0 - ping (is the service there?)
   * 1 - phase 1 (request headers)
   * 2 - phase 2 (request headers and body)
   * 3 - phase 3 (response headers)
   * 4 - phase 4 (response headers and body)
   * 5 - phase 5 (ModSec logging)
   * 6+ - future use
   */
  int32_t command;
  /*
   * e.g. GET /test?a=1&b=2 HTTP/1.1
   */
  char *request_line;
  /*
   * e.g. GET /?a=1 HTTP/1.1 => GET /index.html?a=1 HTTP/1.1
   */
  char *normalized_uri;
  /*
   * IP from client
   */
  char *client_ip;
  /*
   * 4 or 6 or -1 (for unknown)
   */
  int32_t client_ip_version;
  int32_t client_port;
  /*
   * IP of server
   */
  char *server_ip;
  /*
   * 4 or 6 or -1 (for unknown)
   */
  int32_t server_ip_version;
  int32_t server_port;
  /*
   * request headers
   */
  size_t n_request_headers;
  Contrast__Api__Connect__Pair **request_headers;
  /*
   * request body
   */
  ProtobufCBinaryData request_body;
  /*
   * response code
   */
  int32_t response_code;
  /*
   * response headers
   */
  size_t n_response_headers;
  Contrast__Api__Connect__Pair **response_headers;
  /*
   * response body
   */
  ProtobufCBinaryData response_body;
};
#define CONTRAST__API__CONNECT__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__connect__request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string, 0, 0, 0,NULL, {0,NULL}, 0, 0,NULL, {0,NULL} }


struct  _Contrast__Api__Connect__Response
{
  ProtobufCMessage base;
  /*
   * timestamp when this message was created
   */
  int64_t timestamp_ms;
  /*
   * unique id for this request (e.g. transaction id in nginx)
   */
  char *uuid;
  /*
   * was this request tracked (saved for subsequent phases)
   * optimization: if false connector shouldn't need to send additional messages
   */
  protobuf_c_boolean track_request;
  /*
   * did the request fire a security exception (and should the request be blocked)
   * optimization: if true connector should immediately fire a 403
   */
  protobuf_c_boolean security_exception;
  /*
   * client message indicating type of security exception
   */
  char *security_message;
};
#define CONTRAST__API__CONNECT__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__connect__response__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string }


/* Contrast__Api__Connect__Pair methods */
void   contrast__api__connect__pair__init
                     (Contrast__Api__Connect__Pair         *message);
size_t contrast__api__connect__pair__get_packed_size
                     (const Contrast__Api__Connect__Pair   *message);
size_t contrast__api__connect__pair__pack
                     (const Contrast__Api__Connect__Pair   *message,
                      uint8_t             *out);
size_t contrast__api__connect__pair__pack_to_buffer
                     (const Contrast__Api__Connect__Pair   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Connect__Pair *
       contrast__api__connect__pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__connect__pair__free_unpacked
                     (Contrast__Api__Connect__Pair *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Connect__Request methods */
void   contrast__api__connect__request__init
                     (Contrast__Api__Connect__Request         *message);
size_t contrast__api__connect__request__get_packed_size
                     (const Contrast__Api__Connect__Request   *message);
size_t contrast__api__connect__request__pack
                     (const Contrast__Api__Connect__Request   *message,
                      uint8_t             *out);
size_t contrast__api__connect__request__pack_to_buffer
                     (const Contrast__Api__Connect__Request   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Connect__Request *
       contrast__api__connect__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__connect__request__free_unpacked
                     (Contrast__Api__Connect__Request *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Connect__Response methods */
void   contrast__api__connect__response__init
                     (Contrast__Api__Connect__Response         *message);
size_t contrast__api__connect__response__get_packed_size
                     (const Contrast__Api__Connect__Response   *message);
size_t contrast__api__connect__response__pack
                     (const Contrast__Api__Connect__Response   *message,
                      uint8_t             *out);
size_t contrast__api__connect__response__pack_to_buffer
                     (const Contrast__Api__Connect__Response   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Connect__Response *
       contrast__api__connect__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__connect__response__free_unpacked
                     (Contrast__Api__Connect__Response *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Contrast__Api__Connect__Pair_Closure)
                 (const Contrast__Api__Connect__Pair *message,
                  void *closure_data);
typedef void (*Contrast__Api__Connect__Request_Closure)
                 (const Contrast__Api__Connect__Request *message,
                  void *closure_data);
typedef void (*Contrast__Api__Connect__Response_Closure)
                 (const Contrast__Api__Connect__Response *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor contrast__api__connect__pair__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__connect__request__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__connect__response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_connect_2eproto__INCLUDED */
