/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: settings.proto */

#ifndef PROTOBUF_C_settings_2eproto__INCLUDED
#define PROTOBUF_C_settings_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Contrast__Api__Settings__ApplicationState Contrast__Api__Settings__ApplicationState;
typedef struct _Contrast__Api__Settings__AgentSettings Contrast__Api__Settings__AgentSettings;
typedef struct _Contrast__Api__Settings__ProtectState Contrast__Api__Settings__ProtectState;
typedef struct _Contrast__Api__Settings__ServerFeatures Contrast__Api__Settings__ServerFeatures;
typedef struct _Contrast__Api__Settings__ApplicationSettings Contrast__Api__Settings__ApplicationSettings;
typedef struct _Contrast__Api__Settings__AccumulatorSettings Contrast__Api__Settings__AccumulatorSettings;
typedef struct _Contrast__Api__Settings__AccumulatorSettings__AccumulatorsEntry Contrast__Api__Settings__AccumulatorSettings__AccumulatorsEntry;
typedef struct _Contrast__Api__Settings__InventoryFeatures Contrast__Api__Settings__InventoryFeatures;
typedef struct _Contrast__Api__Settings__AssessFeatures Contrast__Api__Settings__AssessFeatures;
typedef struct _Contrast__Api__Settings__AssessFeatures__DynamicSourcesMapEntry Contrast__Api__Settings__AssessFeatures__DynamicSourcesMapEntry;
typedef struct _Contrast__Api__Settings__CustomRuleFeature Contrast__Api__Settings__CustomRuleFeature;
typedef struct _Contrast__Api__Settings__Sampling Contrast__Api__Settings__Sampling;
typedef struct _Contrast__Api__Settings__DynamicSource Contrast__Api__Settings__DynamicSource;
typedef struct _Contrast__Api__Settings__DynamicSource__PropertiesEntry Contrast__Api__Settings__DynamicSource__PropertiesEntry;
typedef struct _Contrast__Api__Settings__DefendFeatures Contrast__Api__Settings__DefendFeatures;
typedef struct _Contrast__Api__Settings__Syslog Contrast__Api__Settings__Syslog;
typedef struct _Contrast__Api__Settings__BotBlocker Contrast__Api__Settings__BotBlocker;
typedef struct _Contrast__Api__Settings__IpFilter Contrast__Api__Settings__IpFilter;
typedef struct _Contrast__Api__Settings__LogEnhancer Contrast__Api__Settings__LogEnhancer;
typedef struct _Contrast__Api__Settings__RuleDefinition Contrast__Api__Settings__RuleDefinition;
typedef struct _Contrast__Api__Settings__StringDefinition Contrast__Api__Settings__StringDefinition;
typedef struct _Contrast__Api__Settings__Exclusion Contrast__Api__Settings__Exclusion;
typedef struct _Contrast__Api__Settings__VirtualPatch Contrast__Api__Settings__VirtualPatch;
typedef struct _Contrast__Api__Settings__VirtualPatchCondition Contrast__Api__Settings__VirtualPatchCondition;
typedef struct _Contrast__Api__Settings__ProtectionRule Contrast__Api__Settings__ProtectionRule;
typedef struct _Contrast__Api__Settings__Accumulator Contrast__Api__Settings__Accumulator;
typedef struct _Contrast__Api__Settings__Auth Contrast__Api__Settings__Auth;


/* --- enums --- */

typedef enum _Contrast__Api__Settings__ServerFeatures__InstrumentationMode {
  CONTRAST__API__SETTINGS__SERVER_FEATURES__INSTRUMENTATION_MODE__UNDEFINED = 0,
  CONTRAST__API__SETTINGS__SERVER_FEATURES__INSTRUMENTATION_MODE__AGENT_CONFIG = 1,
  CONTRAST__API__SETTINGS__SERVER_FEATURES__INSTRUMENTATION_MODE__DUPLEX = 2,
  CONTRAST__API__SETTINGS__SERVER_FEATURES__INSTRUMENTATION_MODE__PROFILER = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__SERVER_FEATURES__INSTRUMENTATION_MODE)
} Contrast__Api__Settings__ServerFeatures__InstrumentationMode;
typedef enum _Contrast__Api__Settings__AssessFeatures__SaveStacktrace {
  CONTRAST__API__SETTINGS__ASSESS_FEATURES__SAVE_STACKTRACE__UNDEFINED = 0,
  CONTRAST__API__SETTINGS__ASSESS_FEATURES__SAVE_STACKTRACE__ALL = 1,
  CONTRAST__API__SETTINGS__ASSESS_FEATURES__SAVE_STACKTRACE__SOME = 2,
  CONTRAST__API__SETTINGS__ASSESS_FEATURES__SAVE_STACKTRACE__NONE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__ASSESS_FEATURES__SAVE_STACKTRACE)
} Contrast__Api__Settings__AssessFeatures__SaveStacktrace;
typedef enum _Contrast__Api__Settings__Syslog__ConnectionType {
  CONTRAST__API__SETTINGS__SYSLOG__CONNECTION_TYPE__UNENCRYPTED = 0,
  CONTRAST__API__SETTINGS__SYSLOG__CONNECTION_TYPE__ENCRYOTED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__SYSLOG__CONNECTION_TYPE)
} Contrast__Api__Settings__Syslog__ConnectionType;
typedef enum _Contrast__Api__Settings__Syslog__Severity {
  CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__UNDEFINED = 0,
  CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__ALERT = 1,
  CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__CRITICAL = 2,
  CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__ERROR = 3,
  CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__WARNING = 4,
  CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__NOTICE = 5,
  CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__INFO = 6,
  CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__DEBUG = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__SYSLOG__SEVERITY)
} Contrast__Api__Settings__Syslog__Severity;
typedef enum _Contrast__Api__Settings__LogEnhancer__LogLevel {
  CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_LEVEL__TRACE = 0,
  CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_LEVEL__DEBUG = 1,
  CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_LEVEL__INFO = 2,
  CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_LEVEL__WARN = 3,
  CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_LEVEL__ERROR = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_LEVEL)
} Contrast__Api__Settings__LogEnhancer__LogLevel;
typedef enum _Contrast__Api__Settings__LogEnhancer__LogType {
  CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_TYPE__LOG_AUDIT = 0,
  CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_TYPE__LOG_ERROR = 1,
  CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_TYPE__LOG_SECURITY = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_TYPE)
} Contrast__Api__Settings__LogEnhancer__LogType;
typedef enum _Contrast__Api__Settings__StringDefinition__Type {
  CONTRAST__API__SETTINGS__STRING_DEFINITION__TYPE__KEYWORD = 0,
  CONTRAST__API__SETTINGS__STRING_DEFINITION__TYPE__PATTERN = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__STRING_DEFINITION__TYPE)
} Contrast__Api__Settings__StringDefinition__Type;
typedef enum _Contrast__Api__Settings__Exclusion__ExclusionType {
  CONTRAST__API__SETTINGS__EXCLUSION__EXCLUSION_TYPE__URL = 0,
  CONTRAST__API__SETTINGS__EXCLUSION__EXCLUSION_TYPE__INPUT = 1,
  CONTRAST__API__SETTINGS__EXCLUSION__EXCLUSION_TYPE__CODE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__EXCLUSION__EXCLUSION_TYPE)
} Contrast__Api__Settings__Exclusion__ExclusionType;
typedef enum _Contrast__Api__Settings__Exclusion__InputType {
  CONTRAST__API__SETTINGS__EXCLUSION__INPUT_TYPE__UNDEFINED = 0,
  CONTRAST__API__SETTINGS__EXCLUSION__INPUT_TYPE__COOKIE = 1,
  CONTRAST__API__SETTINGS__EXCLUSION__INPUT_TYPE__PARAMETER = 2,
  CONTRAST__API__SETTINGS__EXCLUSION__INPUT_TYPE__HEADER = 3,
  CONTRAST__API__SETTINGS__EXCLUSION__INPUT_TYPE__BODY = 4,
  CONTRAST__API__SETTINGS__EXCLUSION__INPUT_TYPE__QUERYSTRING = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__EXCLUSION__INPUT_TYPE)
} Contrast__Api__Settings__Exclusion__InputType;
typedef enum _Contrast__Api__Settings__Exclusion__MatchStrategy {
  CONTRAST__API__SETTINGS__EXCLUSION__MATCH_STRATEGY__ALL = 0,
  CONTRAST__API__SETTINGS__EXCLUSION__MATCH_STRATEGY__ONLY = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__EXCLUSION__MATCH_STRATEGY)
} Contrast__Api__Settings__Exclusion__MatchStrategy;
typedef enum _Contrast__Api__Settings__VirtualPatchCondition__InputType {
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INPUT_TYPE__UNKNOWN_INPUT = 0,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INPUT_TYPE__USERAGENT = 1,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INPUT_TYPE__REFERER = 2,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INPUT_TYPE__URL = 3,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INPUT_TYPE__PARAMETER = 4,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INPUT_TYPE__HEADER = 5,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INPUT_TYPE__CODE = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INPUT_TYPE)
} Contrast__Api__Settings__VirtualPatchCondition__InputType;
typedef enum _Contrast__Api__Settings__VirtualPatchCondition__Evaluation {
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__EVALUATION__UNKNOWN_EVALUATION = 0,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__EVALUATION__MATCHES = 1,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__EVALUATION__DOESNT_MATCH = 2,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__EVALUATION__CONTAINS = 3,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__EVALUATION__DOESNT_CONTAIN = 4,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__EVALUATION__EQUALS = 5,
  CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__EVALUATION__DOESNT_EQUAL = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__EVALUATION)
} Contrast__Api__Settings__VirtualPatchCondition__Evaluation;
typedef enum _Contrast__Api__Settings__ProtectionRule__Mode {
  CONTRAST__API__SETTINGS__PROTECTION_RULE__MODE__NO_ACTION = 0,
  CONTRAST__API__SETTINGS__PROTECTION_RULE__MODE__MONITOR = 1,
  CONTRAST__API__SETTINGS__PROTECTION_RULE__MODE__BLOCK = 2,
  CONTRAST__API__SETTINGS__PROTECTION_RULE__MODE__BLOCK_AT_PERIMETER = 3,
  CONTRAST__API__SETTINGS__PROTECTION_RULE__MODE__PERMIT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__PROTECTION_RULE__MODE)
} Contrast__Api__Settings__ProtectionRule__Mode;
typedef enum _Contrast__Api__Settings__Auth__Mode {
  CONTRAST__API__SETTINGS__AUTH__MODE__OFF = 0,
  CONTRAST__API__SETTINGS__AUTH__MODE__MONITOR = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTRAST__API__SETTINGS__AUTH__MODE)
} Contrast__Api__Settings__Auth__Mode;

/* --- messages --- */

struct  _Contrast__Api__Settings__ApplicationState
{
  ProtobufCMessage base;
  int64_t created_ms;
  char *app_name;
  char *app_language;
  char *app_path;
  char *app_group;
  char *app_tags;
  char *app_version;
  Contrast__Api__Settings__ServerFeatures *server_features;
  Contrast__Api__Settings__ApplicationSettings *application_settings;
  Contrast__Api__Settings__AccumulatorSettings *accumulator_settings;
  char *server_name;
  char *server_path;
  char *server_type;
  char *server_tags;
  char *server_environment;
  char *server_version;
  char *agent_version;
};
#define CONTRAST__API__SETTINGS__APPLICATION_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__application_state__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, NULL, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Settings__AgentSettings
{
  ProtobufCMessage base;
  int64_t sent_ms;
  Contrast__Api__Settings__ServerFeatures *server_features;
  Contrast__Api__Settings__ApplicationSettings *application_settings;
  Contrast__Api__Settings__AccumulatorSettings *accumulator_settings;
  Contrast__Api__Settings__ProtectState *protect_state;
};
#define CONTRAST__API__SETTINGS__AGENT_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__agent_settings__descriptor) \
    , 0, NULL, NULL, NULL, NULL }


struct  _Contrast__Api__Settings__ProtectState
{
  ProtobufCMessage base;
  char *uuid;
  protobuf_c_boolean track_request;
  protobuf_c_boolean security_exception;
  char *security_message;
};
#define CONTRAST__API__SETTINGS__PROTECT_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__protect_state__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Settings__ServerFeatures
{
  ProtobufCMessage base;
  protobuf_c_boolean cache;
  char *log_file;
  /*
   * TODO: convert log_level to an enum
   */
  char *log_level;
  Contrast__Api__Settings__InventoryFeatures *inventory;
  Contrast__Api__Settings__AssessFeatures *assess;
  Contrast__Api__Settings__DefendFeatures *defend;
  Contrast__Api__Settings__ServerFeatures__InstrumentationMode instrumentation_mode;
};
#define CONTRAST__API__SETTINGS__SERVER_FEATURES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__server_features__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, NULL, NULL, CONTRAST__API__SETTINGS__SERVER_FEATURES__INSTRUMENTATION_MODE__UNDEFINED }


struct  _Contrast__Api__Settings__ApplicationSettings
{
  ProtobufCMessage base;
  size_t n_virtual_patches;
  Contrast__Api__Settings__VirtualPatch **virtual_patches;
  size_t n_protection_rules;
  Contrast__Api__Settings__ProtectionRule **protection_rules;
  size_t n_exclusions;
  Contrast__Api__Settings__Exclusion **exclusions;
  size_t n_disabled_assess_rules;
  char **disabled_assess_rules;
};
#define CONTRAST__API__SETTINGS__APPLICATION_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__application_settings__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Contrast__Api__Settings__AccumulatorSettings__AccumulatorsEntry
{
  ProtobufCMessage base;
  char *key;
  Contrast__Api__Settings__Accumulator *value;
};
#define CONTRAST__API__SETTINGS__ACCUMULATOR_SETTINGS__ACCUMULATORS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__accumulator_settings__accumulators_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Contrast__Api__Settings__AccumulatorSettings
{
  ProtobufCMessage base;
  size_t n_accumulators;
  Contrast__Api__Settings__AccumulatorSettings__AccumulatorsEntry **accumulators;
};
#define CONTRAST__API__SETTINGS__ACCUMULATOR_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__accumulator_settings__descriptor) \
    , 0,NULL }


struct  _Contrast__Api__Settings__InventoryFeatures
{
  ProtobufCMessage base;
  protobuf_c_boolean libraries;
  protobuf_c_boolean activity;
  protobuf_c_boolean monitor_db;
  protobuf_c_boolean monitor_ldap;
  protobuf_c_boolean monitor_web_calls;
};
#define CONTRAST__API__SETTINGS__INVENTORY_FEATURES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__inventory_features__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _Contrast__Api__Settings__AssessFeatures__DynamicSourcesMapEntry
{
  ProtobufCMessage base;
  char *key;
  Contrast__Api__Settings__DynamicSource *value;
};
#define CONTRAST__API__SETTINGS__ASSESS_FEATURES__DYNAMIC_SOURCES_MAP_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__assess_features__dynamic_sources_map_entry__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  _Contrast__Api__Settings__AssessFeatures
{
  ProtobufCMessage base;
  protobuf_c_boolean enabled;
  protobuf_c_boolean dynamic_sources;
  protobuf_c_boolean sources;
  protobuf_c_boolean rules;
  protobuf_c_boolean propagators;
  protobuf_c_boolean taggers;
  protobuf_c_boolean response_scanning;
  Contrast__Api__Settings__AssessFeatures__SaveStacktrace stacktraces;
  protobuf_c_boolean validator_scopes;
  protobuf_c_boolean identity_tagging;
  size_t n_sanitizers;
  Contrast__Api__Settings__CustomRuleFeature **sanitizers;
  size_t n_validators;
  Contrast__Api__Settings__CustomRuleFeature **validators;
  size_t n_disabled_rules;
  char **disabled_rules;
  Contrast__Api__Settings__Sampling *sampling;
  size_t n_dynamic_sources_map;
  Contrast__Api__Settings__AssessFeatures__DynamicSourcesMapEntry **dynamic_sources_map;
};
#define CONTRAST__API__SETTINGS__ASSESS_FEATURES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__assess_features__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, CONTRAST__API__SETTINGS__ASSESS_FEATURES__SAVE_STACKTRACE__UNDEFINED, 0, 0, 0,NULL, 0,NULL, 0,NULL, NULL, 0,NULL }


struct  _Contrast__Api__Settings__CustomRuleFeature
{
  ProtobufCMessage base;
  char *api;
  size_t n_tags;
  char **tags;
  size_t n_rules;
  char **rules;
};
#define CONTRAST__API__SETTINGS__CUSTOM_RULE_FEATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__custom_rule_feature__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  _Contrast__Api__Settings__Sampling
{
  ProtobufCMessage base;
  protobuf_c_boolean enabled;
  int32_t baseline;
  int32_t window_ms;
  int32_t request_frequency;
  int32_t response_frequency;
};
#define CONTRAST__API__SETTINGS__SAMPLING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__sampling__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _Contrast__Api__Settings__DynamicSource__PropertiesEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define CONTRAST__API__SETTINGS__DYNAMIC_SOURCE__PROPERTIES_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__dynamic_source__properties_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Settings__DynamicSource
{
  ProtobufCMessage base;
  char *class_name;
  char *method_name;
  protobuf_c_boolean instance_method;
  char *target;
  size_t n_properties;
  Contrast__Api__Settings__DynamicSource__PropertiesEntry **properties;
};
#define CONTRAST__API__SETTINGS__DYNAMIC_SOURCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__dynamic_source__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0,NULL }


struct  _Contrast__Api__Settings__DefendFeatures
{
  ProtobufCMessage base;
  protobuf_c_boolean enabled;
  protobuf_c_boolean bot_blocker;
  size_t n_bot_blockers;
  Contrast__Api__Settings__BotBlocker **bot_blockers;
  size_t n_ip_blacklists;
  Contrast__Api__Settings__IpFilter **ip_blacklists;
  size_t n_ip_whitelists;
  Contrast__Api__Settings__IpFilter **ip_whitelists;
  size_t n_log_enhancers;
  Contrast__Api__Settings__LogEnhancer **log_enhancers;
  size_t n_rule_definitions;
  Contrast__Api__Settings__RuleDefinition **rule_definitions;
  Contrast__Api__Settings__Syslog *syslog;
  Contrast__Api__Settings__Auth *auth;
};
#define CONTRAST__API__SETTINGS__DEFEND_FEATURES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__defend_features__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, NULL }


struct  _Contrast__Api__Settings__Syslog
{
  ProtobufCMessage base;
  protobuf_c_boolean enabled;
  char *ip_address;
  int32_t port;
  int32_t facility_code;
  Contrast__Api__Settings__Syslog__ConnectionType connection_type;
  Contrast__Api__Settings__Syslog__Severity severity_exploited;
  Contrast__Api__Settings__Syslog__Severity severity_blocked;
  Contrast__Api__Settings__Syslog__Severity severity_probed;
};
#define CONTRAST__API__SETTINGS__SYSLOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__syslog__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, CONTRAST__API__SETTINGS__SYSLOG__CONNECTION_TYPE__UNENCRYPTED, CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__UNDEFINED, CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__UNDEFINED, CONTRAST__API__SETTINGS__SYSLOG__SEVERITY__UNDEFINED }


struct  _Contrast__Api__Settings__BotBlocker
{
  ProtobufCMessage base;
  char *bot;
  protobuf_c_boolean case_sensitive;
  protobuf_c_boolean start_anchor;
};
#define CONTRAST__API__SETTINGS__BOT_BLOCKER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__bot_blocker__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  _Contrast__Api__Settings__IpFilter
{
  ProtobufCMessage base;
  protobuf_c_boolean expires;
  int64_t expires_at_ms;
  char *ip;
  char *name;
  char *uuid;
};
#define CONTRAST__API__SETTINGS__IP_FILTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__ip_filter__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Contrast__Api__Settings__LogEnhancer
{
  ProtobufCMessage base;
  int64_t id;
  char *name;
  char *api;
  char *format;
  Contrast__Api__Settings__LogEnhancer__LogLevel log_level;
  Contrast__Api__Settings__LogEnhancer__LogType log_type;
};
#define CONTRAST__API__SETTINGS__LOG_ENHANCER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__log_enhancer__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_LEVEL__TRACE, CONTRAST__API__SETTINGS__LOG_ENHANCER__LOG_TYPE__LOG_AUDIT }


struct  _Contrast__Api__Settings__RuleDefinition
{
  ProtobufCMessage base;
  char *name;
  size_t n_keywords;
  Contrast__Api__Settings__StringDefinition **keywords;
  size_t n_patterns;
  Contrast__Api__Settings__StringDefinition **patterns;
};
#define CONTRAST__API__SETTINGS__RULE_DEFINITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__rule_definition__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  _Contrast__Api__Settings__StringDefinition
{
  ProtobufCMessage base;
  Contrast__Api__Settings__StringDefinition__Type type;
  char *rule;
  char *id;
  char *value;
  char *downcase;
  protobuf_c_boolean case_sensitive;
  int32_t score;
};
#define CONTRAST__API__SETTINGS__STRING_DEFINITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__string_definition__descriptor) \
    , CONTRAST__API__SETTINGS__STRING_DEFINITION__TYPE__KEYWORD, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


struct  _Contrast__Api__Settings__Exclusion
{
  ProtobufCMessage base;
  Contrast__Api__Settings__Exclusion__ExclusionType type;
  char *name;
  Contrast__Api__Settings__Exclusion__MatchStrategy match_strategy;
  /*
   * modes is now deprecated; please use assess and protect bool's
   */
  size_t n_modes;
  char **modes;
  size_t n_protection_rules;
  char **protection_rules;
  size_t n_assessment_rules;
  char **assessment_rules;
  size_t n_urls;
  char **urls;
  size_t n_blacklist;
  char **blacklist;
  Contrast__Api__Settings__Exclusion__InputType input_type;
  char *input_name;
  protobuf_c_boolean assess;
  protobuf_c_boolean protect;
};
#define CONTRAST__API__SETTINGS__EXCLUSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__exclusion__descriptor) \
    , CONTRAST__API__SETTINGS__EXCLUSION__EXCLUSION_TYPE__URL, (char *)protobuf_c_empty_string, CONTRAST__API__SETTINGS__EXCLUSION__MATCH_STRATEGY__ALL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, CONTRAST__API__SETTINGS__EXCLUSION__INPUT_TYPE__UNDEFINED, (char *)protobuf_c_empty_string, 0, 0 }


struct  _Contrast__Api__Settings__VirtualPatch
{
  ProtobufCMessage base;
  char *name;
  char *uuid;
  char *key;
  /*
   * deprecated
   */
  size_t n_headers;
  Contrast__Api__Settings__VirtualPatchCondition **headers;
  size_t n_parameters;
  Contrast__Api__Settings__VirtualPatchCondition **parameters;
  size_t n_urls;
  Contrast__Api__Settings__VirtualPatchCondition **urls;
  /*
   * TODO: update ruby and python agents to use this collection
   */
  size_t n_conditions;
  Contrast__Api__Settings__VirtualPatchCondition **conditions;
};
#define CONTRAST__API__SETTINGS__VIRTUAL_PATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__virtual_patch__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Contrast__Api__Settings__VirtualPatchCondition
{
  ProtobufCMessage base;
  char *name;
  char *value;
  Contrast__Api__Settings__VirtualPatchCondition__InputType input_type;
  Contrast__Api__Settings__VirtualPatchCondition__Evaluation evaluation;
};
#define CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__virtual_patch_condition__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__INPUT_TYPE__UNKNOWN_INPUT, CONTRAST__API__SETTINGS__VIRTUAL_PATCH_CONDITION__EVALUATION__UNKNOWN_EVALUATION }


struct  _Contrast__Api__Settings__ProtectionRule
{
  ProtobufCMessage base;
  char *id;
  char *name;
  Contrast__Api__Settings__ProtectionRule__Mode mode;
};
#define CONTRAST__API__SETTINGS__PROTECTION_RULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__protection_rule__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONTRAST__API__SETTINGS__PROTECTION_RULE__MODE__NO_ACTION }


struct  _Contrast__Api__Settings__Accumulator
{
  ProtobufCMessage base;
  char *name;
  int32_t limit;
  int32_t count;
  int64_t window_ms;
  int64_t created_ms;
  int64_t last_update_ms;
};
#define CONTRAST__API__SETTINGS__ACCUMULATOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__accumulator__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0 }


/*
 * Account Take Over
 */
struct  _Contrast__Api__Settings__Auth
{
  ProtobufCMessage base;
  Contrast__Api__Settings__Auth__Mode mode;
};
#define CONTRAST__API__SETTINGS__AUTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contrast__api__settings__auth__descriptor) \
    , CONTRAST__API__SETTINGS__AUTH__MODE__OFF }


/* Contrast__Api__Settings__ApplicationState methods */
void   contrast__api__settings__application_state__init
                     (Contrast__Api__Settings__ApplicationState         *message);
size_t contrast__api__settings__application_state__get_packed_size
                     (const Contrast__Api__Settings__ApplicationState   *message);
size_t contrast__api__settings__application_state__pack
                     (const Contrast__Api__Settings__ApplicationState   *message,
                      uint8_t             *out);
size_t contrast__api__settings__application_state__pack_to_buffer
                     (const Contrast__Api__Settings__ApplicationState   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__ApplicationState *
       contrast__api__settings__application_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__application_state__free_unpacked
                     (Contrast__Api__Settings__ApplicationState *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__AgentSettings methods */
void   contrast__api__settings__agent_settings__init
                     (Contrast__Api__Settings__AgentSettings         *message);
size_t contrast__api__settings__agent_settings__get_packed_size
                     (const Contrast__Api__Settings__AgentSettings   *message);
size_t contrast__api__settings__agent_settings__pack
                     (const Contrast__Api__Settings__AgentSettings   *message,
                      uint8_t             *out);
size_t contrast__api__settings__agent_settings__pack_to_buffer
                     (const Contrast__Api__Settings__AgentSettings   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__AgentSettings *
       contrast__api__settings__agent_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__agent_settings__free_unpacked
                     (Contrast__Api__Settings__AgentSettings *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__ProtectState methods */
void   contrast__api__settings__protect_state__init
                     (Contrast__Api__Settings__ProtectState         *message);
size_t contrast__api__settings__protect_state__get_packed_size
                     (const Contrast__Api__Settings__ProtectState   *message);
size_t contrast__api__settings__protect_state__pack
                     (const Contrast__Api__Settings__ProtectState   *message,
                      uint8_t             *out);
size_t contrast__api__settings__protect_state__pack_to_buffer
                     (const Contrast__Api__Settings__ProtectState   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__ProtectState *
       contrast__api__settings__protect_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__protect_state__free_unpacked
                     (Contrast__Api__Settings__ProtectState *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__ServerFeatures methods */
void   contrast__api__settings__server_features__init
                     (Contrast__Api__Settings__ServerFeatures         *message);
size_t contrast__api__settings__server_features__get_packed_size
                     (const Contrast__Api__Settings__ServerFeatures   *message);
size_t contrast__api__settings__server_features__pack
                     (const Contrast__Api__Settings__ServerFeatures   *message,
                      uint8_t             *out);
size_t contrast__api__settings__server_features__pack_to_buffer
                     (const Contrast__Api__Settings__ServerFeatures   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__ServerFeatures *
       contrast__api__settings__server_features__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__server_features__free_unpacked
                     (Contrast__Api__Settings__ServerFeatures *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__ApplicationSettings methods */
void   contrast__api__settings__application_settings__init
                     (Contrast__Api__Settings__ApplicationSettings         *message);
size_t contrast__api__settings__application_settings__get_packed_size
                     (const Contrast__Api__Settings__ApplicationSettings   *message);
size_t contrast__api__settings__application_settings__pack
                     (const Contrast__Api__Settings__ApplicationSettings   *message,
                      uint8_t             *out);
size_t contrast__api__settings__application_settings__pack_to_buffer
                     (const Contrast__Api__Settings__ApplicationSettings   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__ApplicationSettings *
       contrast__api__settings__application_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__application_settings__free_unpacked
                     (Contrast__Api__Settings__ApplicationSettings *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__AccumulatorSettings__AccumulatorsEntry methods */
void   contrast__api__settings__accumulator_settings__accumulators_entry__init
                     (Contrast__Api__Settings__AccumulatorSettings__AccumulatorsEntry         *message);
/* Contrast__Api__Settings__AccumulatorSettings methods */
void   contrast__api__settings__accumulator_settings__init
                     (Contrast__Api__Settings__AccumulatorSettings         *message);
size_t contrast__api__settings__accumulator_settings__get_packed_size
                     (const Contrast__Api__Settings__AccumulatorSettings   *message);
size_t contrast__api__settings__accumulator_settings__pack
                     (const Contrast__Api__Settings__AccumulatorSettings   *message,
                      uint8_t             *out);
size_t contrast__api__settings__accumulator_settings__pack_to_buffer
                     (const Contrast__Api__Settings__AccumulatorSettings   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__AccumulatorSettings *
       contrast__api__settings__accumulator_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__accumulator_settings__free_unpacked
                     (Contrast__Api__Settings__AccumulatorSettings *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__InventoryFeatures methods */
void   contrast__api__settings__inventory_features__init
                     (Contrast__Api__Settings__InventoryFeatures         *message);
size_t contrast__api__settings__inventory_features__get_packed_size
                     (const Contrast__Api__Settings__InventoryFeatures   *message);
size_t contrast__api__settings__inventory_features__pack
                     (const Contrast__Api__Settings__InventoryFeatures   *message,
                      uint8_t             *out);
size_t contrast__api__settings__inventory_features__pack_to_buffer
                     (const Contrast__Api__Settings__InventoryFeatures   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__InventoryFeatures *
       contrast__api__settings__inventory_features__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__inventory_features__free_unpacked
                     (Contrast__Api__Settings__InventoryFeatures *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__AssessFeatures__DynamicSourcesMapEntry methods */
void   contrast__api__settings__assess_features__dynamic_sources_map_entry__init
                     (Contrast__Api__Settings__AssessFeatures__DynamicSourcesMapEntry         *message);
/* Contrast__Api__Settings__AssessFeatures methods */
void   contrast__api__settings__assess_features__init
                     (Contrast__Api__Settings__AssessFeatures         *message);
size_t contrast__api__settings__assess_features__get_packed_size
                     (const Contrast__Api__Settings__AssessFeatures   *message);
size_t contrast__api__settings__assess_features__pack
                     (const Contrast__Api__Settings__AssessFeatures   *message,
                      uint8_t             *out);
size_t contrast__api__settings__assess_features__pack_to_buffer
                     (const Contrast__Api__Settings__AssessFeatures   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__AssessFeatures *
       contrast__api__settings__assess_features__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__assess_features__free_unpacked
                     (Contrast__Api__Settings__AssessFeatures *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__CustomRuleFeature methods */
void   contrast__api__settings__custom_rule_feature__init
                     (Contrast__Api__Settings__CustomRuleFeature         *message);
size_t contrast__api__settings__custom_rule_feature__get_packed_size
                     (const Contrast__Api__Settings__CustomRuleFeature   *message);
size_t contrast__api__settings__custom_rule_feature__pack
                     (const Contrast__Api__Settings__CustomRuleFeature   *message,
                      uint8_t             *out);
size_t contrast__api__settings__custom_rule_feature__pack_to_buffer
                     (const Contrast__Api__Settings__CustomRuleFeature   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__CustomRuleFeature *
       contrast__api__settings__custom_rule_feature__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__custom_rule_feature__free_unpacked
                     (Contrast__Api__Settings__CustomRuleFeature *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__Sampling methods */
void   contrast__api__settings__sampling__init
                     (Contrast__Api__Settings__Sampling         *message);
size_t contrast__api__settings__sampling__get_packed_size
                     (const Contrast__Api__Settings__Sampling   *message);
size_t contrast__api__settings__sampling__pack
                     (const Contrast__Api__Settings__Sampling   *message,
                      uint8_t             *out);
size_t contrast__api__settings__sampling__pack_to_buffer
                     (const Contrast__Api__Settings__Sampling   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__Sampling *
       contrast__api__settings__sampling__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__sampling__free_unpacked
                     (Contrast__Api__Settings__Sampling *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__DynamicSource__PropertiesEntry methods */
void   contrast__api__settings__dynamic_source__properties_entry__init
                     (Contrast__Api__Settings__DynamicSource__PropertiesEntry         *message);
/* Contrast__Api__Settings__DynamicSource methods */
void   contrast__api__settings__dynamic_source__init
                     (Contrast__Api__Settings__DynamicSource         *message);
size_t contrast__api__settings__dynamic_source__get_packed_size
                     (const Contrast__Api__Settings__DynamicSource   *message);
size_t contrast__api__settings__dynamic_source__pack
                     (const Contrast__Api__Settings__DynamicSource   *message,
                      uint8_t             *out);
size_t contrast__api__settings__dynamic_source__pack_to_buffer
                     (const Contrast__Api__Settings__DynamicSource   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__DynamicSource *
       contrast__api__settings__dynamic_source__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__dynamic_source__free_unpacked
                     (Contrast__Api__Settings__DynamicSource *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__DefendFeatures methods */
void   contrast__api__settings__defend_features__init
                     (Contrast__Api__Settings__DefendFeatures         *message);
size_t contrast__api__settings__defend_features__get_packed_size
                     (const Contrast__Api__Settings__DefendFeatures   *message);
size_t contrast__api__settings__defend_features__pack
                     (const Contrast__Api__Settings__DefendFeatures   *message,
                      uint8_t             *out);
size_t contrast__api__settings__defend_features__pack_to_buffer
                     (const Contrast__Api__Settings__DefendFeatures   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__DefendFeatures *
       contrast__api__settings__defend_features__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__defend_features__free_unpacked
                     (Contrast__Api__Settings__DefendFeatures *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__Syslog methods */
void   contrast__api__settings__syslog__init
                     (Contrast__Api__Settings__Syslog         *message);
size_t contrast__api__settings__syslog__get_packed_size
                     (const Contrast__Api__Settings__Syslog   *message);
size_t contrast__api__settings__syslog__pack
                     (const Contrast__Api__Settings__Syslog   *message,
                      uint8_t             *out);
size_t contrast__api__settings__syslog__pack_to_buffer
                     (const Contrast__Api__Settings__Syslog   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__Syslog *
       contrast__api__settings__syslog__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__syslog__free_unpacked
                     (Contrast__Api__Settings__Syslog *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__BotBlocker methods */
void   contrast__api__settings__bot_blocker__init
                     (Contrast__Api__Settings__BotBlocker         *message);
size_t contrast__api__settings__bot_blocker__get_packed_size
                     (const Contrast__Api__Settings__BotBlocker   *message);
size_t contrast__api__settings__bot_blocker__pack
                     (const Contrast__Api__Settings__BotBlocker   *message,
                      uint8_t             *out);
size_t contrast__api__settings__bot_blocker__pack_to_buffer
                     (const Contrast__Api__Settings__BotBlocker   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__BotBlocker *
       contrast__api__settings__bot_blocker__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__bot_blocker__free_unpacked
                     (Contrast__Api__Settings__BotBlocker *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__IpFilter methods */
void   contrast__api__settings__ip_filter__init
                     (Contrast__Api__Settings__IpFilter         *message);
size_t contrast__api__settings__ip_filter__get_packed_size
                     (const Contrast__Api__Settings__IpFilter   *message);
size_t contrast__api__settings__ip_filter__pack
                     (const Contrast__Api__Settings__IpFilter   *message,
                      uint8_t             *out);
size_t contrast__api__settings__ip_filter__pack_to_buffer
                     (const Contrast__Api__Settings__IpFilter   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__IpFilter *
       contrast__api__settings__ip_filter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__ip_filter__free_unpacked
                     (Contrast__Api__Settings__IpFilter *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__LogEnhancer methods */
void   contrast__api__settings__log_enhancer__init
                     (Contrast__Api__Settings__LogEnhancer         *message);
size_t contrast__api__settings__log_enhancer__get_packed_size
                     (const Contrast__Api__Settings__LogEnhancer   *message);
size_t contrast__api__settings__log_enhancer__pack
                     (const Contrast__Api__Settings__LogEnhancer   *message,
                      uint8_t             *out);
size_t contrast__api__settings__log_enhancer__pack_to_buffer
                     (const Contrast__Api__Settings__LogEnhancer   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__LogEnhancer *
       contrast__api__settings__log_enhancer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__log_enhancer__free_unpacked
                     (Contrast__Api__Settings__LogEnhancer *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__RuleDefinition methods */
void   contrast__api__settings__rule_definition__init
                     (Contrast__Api__Settings__RuleDefinition         *message);
size_t contrast__api__settings__rule_definition__get_packed_size
                     (const Contrast__Api__Settings__RuleDefinition   *message);
size_t contrast__api__settings__rule_definition__pack
                     (const Contrast__Api__Settings__RuleDefinition   *message,
                      uint8_t             *out);
size_t contrast__api__settings__rule_definition__pack_to_buffer
                     (const Contrast__Api__Settings__RuleDefinition   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__RuleDefinition *
       contrast__api__settings__rule_definition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__rule_definition__free_unpacked
                     (Contrast__Api__Settings__RuleDefinition *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__StringDefinition methods */
void   contrast__api__settings__string_definition__init
                     (Contrast__Api__Settings__StringDefinition         *message);
size_t contrast__api__settings__string_definition__get_packed_size
                     (const Contrast__Api__Settings__StringDefinition   *message);
size_t contrast__api__settings__string_definition__pack
                     (const Contrast__Api__Settings__StringDefinition   *message,
                      uint8_t             *out);
size_t contrast__api__settings__string_definition__pack_to_buffer
                     (const Contrast__Api__Settings__StringDefinition   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__StringDefinition *
       contrast__api__settings__string_definition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__string_definition__free_unpacked
                     (Contrast__Api__Settings__StringDefinition *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__Exclusion methods */
void   contrast__api__settings__exclusion__init
                     (Contrast__Api__Settings__Exclusion         *message);
size_t contrast__api__settings__exclusion__get_packed_size
                     (const Contrast__Api__Settings__Exclusion   *message);
size_t contrast__api__settings__exclusion__pack
                     (const Contrast__Api__Settings__Exclusion   *message,
                      uint8_t             *out);
size_t contrast__api__settings__exclusion__pack_to_buffer
                     (const Contrast__Api__Settings__Exclusion   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__Exclusion *
       contrast__api__settings__exclusion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__exclusion__free_unpacked
                     (Contrast__Api__Settings__Exclusion *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__VirtualPatch methods */
void   contrast__api__settings__virtual_patch__init
                     (Contrast__Api__Settings__VirtualPatch         *message);
size_t contrast__api__settings__virtual_patch__get_packed_size
                     (const Contrast__Api__Settings__VirtualPatch   *message);
size_t contrast__api__settings__virtual_patch__pack
                     (const Contrast__Api__Settings__VirtualPatch   *message,
                      uint8_t             *out);
size_t contrast__api__settings__virtual_patch__pack_to_buffer
                     (const Contrast__Api__Settings__VirtualPatch   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__VirtualPatch *
       contrast__api__settings__virtual_patch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__virtual_patch__free_unpacked
                     (Contrast__Api__Settings__VirtualPatch *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__VirtualPatchCondition methods */
void   contrast__api__settings__virtual_patch_condition__init
                     (Contrast__Api__Settings__VirtualPatchCondition         *message);
size_t contrast__api__settings__virtual_patch_condition__get_packed_size
                     (const Contrast__Api__Settings__VirtualPatchCondition   *message);
size_t contrast__api__settings__virtual_patch_condition__pack
                     (const Contrast__Api__Settings__VirtualPatchCondition   *message,
                      uint8_t             *out);
size_t contrast__api__settings__virtual_patch_condition__pack_to_buffer
                     (const Contrast__Api__Settings__VirtualPatchCondition   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__VirtualPatchCondition *
       contrast__api__settings__virtual_patch_condition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__virtual_patch_condition__free_unpacked
                     (Contrast__Api__Settings__VirtualPatchCondition *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__ProtectionRule methods */
void   contrast__api__settings__protection_rule__init
                     (Contrast__Api__Settings__ProtectionRule         *message);
size_t contrast__api__settings__protection_rule__get_packed_size
                     (const Contrast__Api__Settings__ProtectionRule   *message);
size_t contrast__api__settings__protection_rule__pack
                     (const Contrast__Api__Settings__ProtectionRule   *message,
                      uint8_t             *out);
size_t contrast__api__settings__protection_rule__pack_to_buffer
                     (const Contrast__Api__Settings__ProtectionRule   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__ProtectionRule *
       contrast__api__settings__protection_rule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__protection_rule__free_unpacked
                     (Contrast__Api__Settings__ProtectionRule *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__Accumulator methods */
void   contrast__api__settings__accumulator__init
                     (Contrast__Api__Settings__Accumulator         *message);
size_t contrast__api__settings__accumulator__get_packed_size
                     (const Contrast__Api__Settings__Accumulator   *message);
size_t contrast__api__settings__accumulator__pack
                     (const Contrast__Api__Settings__Accumulator   *message,
                      uint8_t             *out);
size_t contrast__api__settings__accumulator__pack_to_buffer
                     (const Contrast__Api__Settings__Accumulator   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__Accumulator *
       contrast__api__settings__accumulator__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__accumulator__free_unpacked
                     (Contrast__Api__Settings__Accumulator *message,
                      ProtobufCAllocator *allocator);
/* Contrast__Api__Settings__Auth methods */
void   contrast__api__settings__auth__init
                     (Contrast__Api__Settings__Auth         *message);
size_t contrast__api__settings__auth__get_packed_size
                     (const Contrast__Api__Settings__Auth   *message);
size_t contrast__api__settings__auth__pack
                     (const Contrast__Api__Settings__Auth   *message,
                      uint8_t             *out);
size_t contrast__api__settings__auth__pack_to_buffer
                     (const Contrast__Api__Settings__Auth   *message,
                      ProtobufCBuffer     *buffer);
Contrast__Api__Settings__Auth *
       contrast__api__settings__auth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contrast__api__settings__auth__free_unpacked
                     (Contrast__Api__Settings__Auth *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Contrast__Api__Settings__ApplicationState_Closure)
                 (const Contrast__Api__Settings__ApplicationState *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__AgentSettings_Closure)
                 (const Contrast__Api__Settings__AgentSettings *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__ProtectState_Closure)
                 (const Contrast__Api__Settings__ProtectState *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__ServerFeatures_Closure)
                 (const Contrast__Api__Settings__ServerFeatures *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__ApplicationSettings_Closure)
                 (const Contrast__Api__Settings__ApplicationSettings *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__AccumulatorSettings__AccumulatorsEntry_Closure)
                 (const Contrast__Api__Settings__AccumulatorSettings__AccumulatorsEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__AccumulatorSettings_Closure)
                 (const Contrast__Api__Settings__AccumulatorSettings *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__InventoryFeatures_Closure)
                 (const Contrast__Api__Settings__InventoryFeatures *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__AssessFeatures__DynamicSourcesMapEntry_Closure)
                 (const Contrast__Api__Settings__AssessFeatures__DynamicSourcesMapEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__AssessFeatures_Closure)
                 (const Contrast__Api__Settings__AssessFeatures *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__CustomRuleFeature_Closure)
                 (const Contrast__Api__Settings__CustomRuleFeature *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__Sampling_Closure)
                 (const Contrast__Api__Settings__Sampling *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__DynamicSource__PropertiesEntry_Closure)
                 (const Contrast__Api__Settings__DynamicSource__PropertiesEntry *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__DynamicSource_Closure)
                 (const Contrast__Api__Settings__DynamicSource *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__DefendFeatures_Closure)
                 (const Contrast__Api__Settings__DefendFeatures *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__Syslog_Closure)
                 (const Contrast__Api__Settings__Syslog *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__BotBlocker_Closure)
                 (const Contrast__Api__Settings__BotBlocker *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__IpFilter_Closure)
                 (const Contrast__Api__Settings__IpFilter *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__LogEnhancer_Closure)
                 (const Contrast__Api__Settings__LogEnhancer *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__RuleDefinition_Closure)
                 (const Contrast__Api__Settings__RuleDefinition *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__StringDefinition_Closure)
                 (const Contrast__Api__Settings__StringDefinition *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__Exclusion_Closure)
                 (const Contrast__Api__Settings__Exclusion *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__VirtualPatch_Closure)
                 (const Contrast__Api__Settings__VirtualPatch *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__VirtualPatchCondition_Closure)
                 (const Contrast__Api__Settings__VirtualPatchCondition *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__ProtectionRule_Closure)
                 (const Contrast__Api__Settings__ProtectionRule *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__Accumulator_Closure)
                 (const Contrast__Api__Settings__Accumulator *message,
                  void *closure_data);
typedef void (*Contrast__Api__Settings__Auth_Closure)
                 (const Contrast__Api__Settings__Auth *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor contrast__api__settings__application_state__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__agent_settings__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__protect_state__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__server_features__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__server_features__instrumentation_mode__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__application_settings__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__accumulator_settings__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__accumulator_settings__accumulators_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__inventory_features__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__assess_features__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__assess_features__dynamic_sources_map_entry__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__assess_features__save_stacktrace__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__custom_rule_feature__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__sampling__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__dynamic_source__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__dynamic_source__properties_entry__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__defend_features__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__syslog__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__syslog__connection_type__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__syslog__severity__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__bot_blocker__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__ip_filter__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__log_enhancer__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__log_enhancer__log_level__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__log_enhancer__log_type__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__rule_definition__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__string_definition__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__string_definition__type__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__exclusion__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__exclusion__exclusion_type__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__exclusion__input_type__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__exclusion__match_strategy__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__virtual_patch__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__virtual_patch_condition__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__virtual_patch_condition__input_type__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__virtual_patch_condition__evaluation__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__protection_rule__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__protection_rule__mode__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__accumulator__descriptor;
extern const ProtobufCMessageDescriptor contrast__api__settings__auth__descriptor;
extern const ProtobufCEnumDescriptor    contrast__api__settings__auth__mode__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_settings_2eproto__INCLUDED */
